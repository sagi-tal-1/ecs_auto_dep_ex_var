#!/bin/bash

# AWS Configuration
CLUSTER_NAME="demo-cluster-cc8a8123"
NODEJS_SERVICE="ECS_service-ecs-service-node-cc8a8123"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

get_task_details() {
    local task_arn=$1
    aws ecs describe-tasks \
        --cluster $CLUSTER_NAME \
        --tasks $task_arn
}

get_container_logs() {
    local task_id=$1
    local container_name="my-container-nodejs"
    aws logs get-log-events \
        --log-group-name "/ecs/${container_name}" \
        --log-stream-name "ecs/${container_name}/${task_id}" \
        --limit 5 2>/dev/null
}

print_service_info() {
    local service_name=$1
    echo -e "${BLUE}=== Checking service: $service_name ===${NC}"
    
    # Get service details
    service_info=$(aws ecs describe-services \
        --cluster $CLUSTER_NAME \
        --services $service_name)
    
    # Get deployment info
    echo -e "\n${YELLOW}Deployment Information:${NC}"
    echo "$service_info" | jq -r '.services[0].deployments[] | "Type: \(.status) | Task Definition: \(.taskDefinition) | Desired: \(.desiredCount) | Running: \(.runningCount) | Pending: \(.pendingCount)"'

    tasks=$(aws ecs list-tasks \
        --cluster $CLUSTER_NAME \
        --service-name $service_name \
        --query 'taskArns[]' \
        --output text)

    if [ -z "$tasks" ]; then
        echo -e "${RED}No tasks found for service $service_name${NC}"
        return
    fi

    echo -e "\n${YELLOW}Task Distribution:${NC}"
    for task in $tasks; do
        task_id=$(echo $task | awk -F'/' '{print $3}')
        echo -e "\n${BLUE}Task ID: $task_id${NC}"
        
        task_info=$(get_task_details $task)
        
        # Get detailed task information
        container_info=$(echo $task_info | jq -r '.tasks[0].containers[0]')
        task_def_arn=$(echo $task_info | jq -r '.tasks[0].taskDefinitionArn')
        
        # Container Status Details
        echo -e "${YELLOW}Container Status:${NC}"
        status=$(echo "$container_info" | jq -r '.lastStatus')
        health=$(echo "$container_info" | jq -r '.healthStatus')
        
        echo -e "Status: ${BLUE}$status${NC}"
        if [ "$health" == "HEALTHY" ]; then
            echo -e "Health: ${GREEN}$health${NC}"
        elif [ "$health" == "UNHEALTHY" ]; then
            echo -e "Health: ${RED}$health${NC}"
            
            # Get health check details from task definition
            task_def=$(aws ecs describe-task-definition --task-definition $task_def_arn)
            health_check=$(echo "$task_def" | jq -r '.taskDefinition.containerDefinitions[0].healthCheck')
            echo -e "\n${YELLOW}Health Check Configuration:${NC}"
            echo "$health_check" | jq '.'
            
            # Get recent container logs
            echo -e "\n${YELLOW}Recent Container Logs:${NC}"
            logs=$(get_container_logs $task_id)
            if [ ! -z "$logs" ]; then
                echo "$logs" | jq -r '.events[].message'
            else
                echo "No logs available"
            fi
        else
            echo -e "Health: ${YELLOW}UNKNOWN${NC}"
        fi

        # Container Instance Information
        container_instance_arn=$(echo $task_info | jq -r '.tasks[0].containerInstanceArn')
        if [ ! -z "$container_instance_arn" ] && [ "$container_instance_arn" != "null" ]; then
            echo -e "\n${YELLOW}Instance Information:${NC}"
            container_instance=$(aws ecs describe-container-instances \
                --cluster $CLUSTER_NAME \
                --container-instances $container_instance_arn)
            
            ec2_instance_id=$(echo "$container_instance" | jq -r '.containerInstances[0].ec2InstanceId')
            
            # Get EC2 instance details
            ec2_info=$(aws ec2 describe-instances --instance-ids $ec2_instance_id)
            az=$(echo "$ec2_info" | jq -r '.Reservations[0].Instances[0].Placement.AvailabilityZone')
            private_ip=$(echo "$ec2_info" | jq -r '.Reservations[0].Instances[0].PrivateIpAddress')
            
            echo "EC2 Instance: $ec2_instance_id"
            echo "Availability Zone: $az"
            echo "Private IP: $private_ip"
            
            # Resource utilization
            cpu_available=$(echo "$container_instance" | jq -r '.containerInstances[0].remainingResources[] | select(.name=="CPU") | .integerValue')
            mem_available=$(echo "$container_instance" | jq -r '.containerInstances[0].remainingResources[] | select(.name=="MEMORY") | .integerValue')
            echo "Available CPU: $cpu_available"
            echo "Available Memory: $mem_available MB"

            # Health Check
            echo -e "\n${YELLOW}Health Check:${NC}"
            response=$(curl -s -m 2 -o /dev/null -w "%{http_code}" http://${private_ip}:3000/health 2>/dev/null || echo "Failed")
            if [ "$response" == "200" ]; then
                echo -e "Endpoint Status: ${GREEN}HEALTHY${NC} (HTTP 200)"
            else
                echo -e "Endpoint Status: ${RED}UNHEALTHY${NC} (Response: $response)"
            fi
        fi

        echo "----------------------------------------"
    done

    # Service Events
    echo -e "\n${YELLOW}Recent Service Events:${NC}"
    echo "$service_info" | jq -r '.services[0].events[:5][] | "[\(.createdAt)]: \(.message)"'
}

# Main execution
echo -e "${GREEN}Starting service discovery...${NC}"
print_service_info "$NODEJS_SERVICE"

# Save results to a log file with timestamp
log_file="ecs_health_$(date +%Y%m%d_%H%M%S).log"
{
    echo "ECS Health Check Report - $(date)"
    echo "Cluster: $CLUSTER_NAME"
    print_service_info "$NODEJS_SERVICE"
} | tee "$log_file"

echo -e "\n${GREEN}Log saved to: $log_file${NC}"



This enhanced script will:

Show deployment information

Display task distribution across AZs

Show health check configuration

Display recent container logs for unhealthy tasks

Show resource utilization per instance

Display recent service events

Show detailed health check configuration

To use:

chmod +x discovery.sh
./discovery.sh

Copy

Insert at cursor
bash
The script will now provide:

Deployment status and counts

Task distribution across availability zones

Detailed health check configurations

Container logs for troubleshooting

Resource utilization metrics

Service events history

This will help identify:

Why tasks are marked as unhealthy

Where tasks are placed across your EC2 instances

Any resource constraints

Recent deployment or scaling events

Health check configuration issues

The "Unknown" status typically occurs when:

The task is still starting up

The health check hasn't completed its first check

The task is being terminated

There are resource constraints

The "Unhealthy" status usually means:

The health check endpoint is failing

The application is not responding correctly

There are resource issues

The container is having runtime problems