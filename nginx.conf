http {
    upstream nodejs_backend {
    }

    server {
        listen 80;
        server_name localhost;

        location / {
            proxy_pass http://nodejs_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
}

events {
    worker_connections 1024;
}








docker run -d \ -p 80:80 \ -e ECS_CLUSTER=demo-ecs-Nservice-b2176da7 \ -e ECS_SERVICE=ECS_service-ecs-service-node-b2176da7 \ -v ~/.aws/credentials:/root/.aws/credentials:ro \ nginx-ecs-proxy


docker run -d \
  -p 80:80 \
  -e ECS_CLUSTER=demo-ecs-Nservice-b2176da7 \
  -e ECS_SERVICE=ECS_service-ecs-service-node-b2176da7 \
  -v ~/.aws/credentials:/root/.aws/credentials:ro \
  nginx-ecs-proxy



events {
    worker_connections 1024;
}

http {
    upstream backend {
        server TASK_IP:3000;
    }

    server {
        listen 80;
        
        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
}
docker run -it --rm \
    -e AWS_ACCESS_KEY_ID="LRjWU9ZDT0p3yisrQiBlnw3/nGKiBoR2zzPgvcrc" \
    -e AWS_SECRET_ACCESS_KEY="REMOVED_SECRET" \
    -e AWS_DEFAULT_REGION="us-east-1" \
    -e CLUSTER_NAME="us-east-1" \
    -e SERVICE_NAME="ECS_service-ecs-service-node-b2176da7" \
    -p 80:80 \
    nginx-ecs-proxy


    docker run -it --rm \
    -e AWS_ACCESS_KEY_ID="LRjWU9ZDT0p3yisrQiBlnw3/nGKiBoR2zzPgvcrc" \
    -e AWS_SECRET_ACCESS_KEY="REMOVED_SECRET" \
    -e AWS_DEFAULT_REGION="us-east-1" \
    -e CLUSTER_NAME="demo-ecs-Nservice-ce9d8def" \
    -e SERVICE_NAME="ECS_service-ecs-service-node-ce9d8def" \
    -p 80:80 \
    my-nginx-proxy
