http {
    # Define upstreams for each service identity (1-7)
    upstream service1 {
        server my-internal-alb.internal:80;
        keepalive 32;
    }
    upstream service2 {
        server my-internal-alb.internal:80;
        keepalive 32;
    }
    # ... Define similar upstreams for service3 through service7

    server {
        listen 80;
        server_name _;

        # Default static content
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;

            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header X-Content-Type-Options "nosniff" always;
        }

        # Service identity routing
        location ~ ^/service([1-7])(/.*)?$ {
            set $service_number $1;
            set $service_path $2;

            # Rewrite the URL to remove the service prefix
            rewrite ^/service[1-7](/.*)$ $1 break;

            proxy_pass http://service$service_number;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Return 404 if service doesn't exist (handled by location block match)
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 'healthy\n';
        }
        # Catch all other requests with 404
        location / {
            return 404;
        }
    }
}
