# data.aws_ami.ecs_optimized:
data "aws_ami" "ecs_optimized" {
    architecture          = "x86_64"
    arn                   = "arn:aws:ec2:us-east-1::image/ami-0448a709165fd89ff"
    block_device_mappings = [
        {
            device_name  = "/dev/xvda"
            ebs          = {
                "delete_on_termination" = "true"
                "encrypted"             = "false"
                "iops"                  = "0"
                "snapshot_id"           = "snap-00309ff3c3011fb97"
                "throughput"            = "0"
                "volume_size"           = "30"
                "volume_type"           = "gp2"
            }
            no_device    = [90mnull[0m[0m
            virtual_name = [90mnull[0m[0m
        },
    ]
    boot_mode             = [90mnull[0m[0m
    creation_date         = "2024-12-18T01:23:13.000Z"
    deprecation_time      = "2026-12-18T01:23:13.000Z"
    description           = "Amazon Linux AMI 2.0.20241217 x86_64 ECS HVM GP2"
    ena_support           = true
    hypervisor            = "xen"
    id                    = "ami-0448a709165fd89ff"
    image_id              = "ami-0448a709165fd89ff"
    image_location        = "amazon/amzn2-ami-ecs-hvm-2.0.20241217-x86_64-ebs"
    image_owner_alias     = "amazon"
    image_type            = "machine"
    imds_support          = [90mnull[0m[0m
    include_deprecated    = false
    kernel_id             = [90mnull[0m[0m
    most_recent           = true
    name                  = "amzn2-ami-ecs-hvm-2.0.20241217-x86_64-ebs"
    owner_id              = "591542846629"
    owners                = [
        "amazon",
    ]
    platform              = [90mnull[0m[0m
    platform_details      = "Linux/UNIX"
    product_codes         = []
    public                = true
    ramdisk_id            = [90mnull[0m[0m
    root_device_name      = "/dev/xvda"
    root_device_type      = "ebs"
    root_snapshot_id      = "snap-00309ff3c3011fb97"
    sriov_net_support     = "simple"
    state                 = "available"
    state_reason          = {
        "code"    = "UNSET"
        "message" = "UNSET"
    }
    tags                  = {}
    tpm_support           = [90mnull[0m[0m
    usage_operation       = "RunInstances"
    virtualization_type   = "hvm"

    filter {
        name   = "architecture"
        values = [
            "x86_64",
        ]
    }
    filter {
        name   = "name"
        values = [
            "amzn2-ami-ecs-hvm-*-x86_64-ebs",
        ]
    }
    filter {
        name   = "owner-id"
        values = [
            "591542846629",
        ]
    }
    filter {
        name   = "root-device-type"
        values = [
            "ebs",
        ]
    }
    filter {
        name   = "virtualization-type"
        values = [
            "hvm",
        ]
    }
}

# data.aws_availability_zones.available:
data "aws_availability_zones" "available" {
    group_names = [
        "us-east-1",
    ]
    id          = "us-east-1"
    names       = [
        "us-east-1a",
        "us-east-1b",
        "us-east-1c",
        "us-east-1d",
        "us-east-1e",
        "us-east-1f",
    ]
    state       = "available"
    zone_ids    = [
        "use1-az2",
        "use1-az4",
        "use1-az6",
        "use1-az1",
        "use1-az3",
        "use1-az5",
    ]
}

# data.aws_eips.all:
data "aws_eips" "all" {
    allocation_ids = []
    id             = "us-east-1"
    public_ips     = []

    filter {
        name   = "domain"
        values = [
            "vpc",
        ]
    }
}

# data.aws_instances.ecs_instances:
data "aws_instances" "ecs_instances" {
    id             = "us-east-1"
    ids            = [
        "i-09efae67b0acd89a1",
    ]
    ipv6_addresses = []
    private_ips    = [
        "10.0.2.161",
    ]
    public_ips     = []

    filter {
        name   = "instance-state-name"
        values = [
            "running",
        ]
    }
    filter {
        name   = "tag:aws:autoscaling:groupName"
        values = [
            "demo-asg-82a5a8b2-asg",
        ]
    }
}

# aws_eip.eip[0]:
resource "aws_eip" "eip" {
    allocation_id            = "eipalloc-09a44f9729329b8c7"
    arn                      = "arn:aws:ec2:us-east-1:010575877879:elastic-ip/eipalloc-09a44f9729329b8c7"
    association_id           = [90mnull[0m[0m
    carrier_ip               = [90mnull[0m[0m
    customer_owned_ip        = [90mnull[0m[0m
    customer_owned_ipv4_pool = [90mnull[0m[0m
    domain                   = "vpc"
    id                       = "eipalloc-09a44f9729329b8c7"
    instance                 = [90mnull[0m[0m
    network_border_group     = "us-east-1"
    network_interface        = [90mnull[0m[0m
    private_ip               = [90mnull[0m[0m
    ptr_record               = [90mnull[0m[0m
    public_dns               = "ec2-98-85-18-91.compute-1.amazonaws.com"
    public_ip                = "98.85.18.91"
    public_ipv4_pool         = "amazon"
    tags                     = {
        "Name" = "Managed-EIP-1"
    }
    tags_all                 = {
        "Name" = "Managed-EIP-1"
    }
    vpc                      = true
}

# aws_eip.eip[1]:
resource "aws_eip" "eip" {
    allocation_id            = "eipalloc-0e31ca1c5078f51a7"
    arn                      = "arn:aws:ec2:us-east-1:010575877879:elastic-ip/eipalloc-0e31ca1c5078f51a7"
    association_id           = [90mnull[0m[0m
    carrier_ip               = [90mnull[0m[0m
    customer_owned_ip        = [90mnull[0m[0m
    customer_owned_ipv4_pool = [90mnull[0m[0m
    domain                   = "vpc"
    id                       = "eipalloc-0e31ca1c5078f51a7"
    instance                 = [90mnull[0m[0m
    network_border_group     = "us-east-1"
    network_interface        = [90mnull[0m[0m
    private_ip               = [90mnull[0m[0m
    ptr_record               = [90mnull[0m[0m
    public_dns               = "ec2-44-198-73-39.compute-1.amazonaws.com"
    public_ip                = "44.198.73.39"
    public_ipv4_pool         = "amazon"
    tags                     = {
        "Name" = "Managed-EIP-2"
    }
    tags_all                 = {
        "Name" = "Managed-EIP-2"
    }
    vpc                      = true
}

# aws_key_pair.generated_key:
resource "aws_key_pair" "generated_key" {
    arn             = "arn:aws:ec2:us-east-1:010575877879:key-pair/ecs-instance-key-82a5a8b2"
    fingerprint     = "77:25:f2:66:26:57:a4:9e:d8:43:c8:26:36:85:af:9b"
    id              = "ecs-instance-key-82a5a8b2"
    key_name        = "ecs-instance-key-82a5a8b2"
    key_name_prefix = [90mnull[0m[0m
    key_pair_id     = "key-0a0a5522f73365573"
    key_type        = "rsa"
    public_key      = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDc/4j48g9FD9j0YdipsFQ+34IzQTafnd8liReWorO6HiWTKeZ2XyldbqHh8COGJt5gj9VMM48QKATxVByqS/XuYsLuzJesIrRLosl9aIdSTiVWAOfuWBKEtev34AhSe3/A0udIv5kXDdrCE5QXUHSlYYUKLwunqhicUaxqAShXLCPIDOza5ER4NdyVMIrtzHsdKUHisGX7NPTT3iaCsyrhrZFtGiwJ1KsdmgilEZ9FIT9I5aA8dYInGw679UytkZEEVcMGKeW/qixcmURoC/D4vo5A3dPZt/bdjMDDLhNZgOh9KFJFhqdcz08JNndT0y2nmdRqM2a5/NZGjlfUnJ6E0e4xPK8IuPC4SKO5MQaZdBM8OJoeID0IX4Kn33B+B5X1f8PbH7qvF9jDTFreQLh8Jg5ox8n4py53u3DfYJE5Vyeeoq32sr0jshRGw+lgPtxY8Rq6H5Cgaz3MyGpawSyZoSNfOjjISje2HnqrKxicMRzGWoNSubkTfAvlOS+3VV+caBBLYJLS4WDERGRzABPIKuzpZUfKcbnWqbx0rYw7bqYkelh1LuVZTjhhgMJ/+Y+2UsOSup/sWXDUgeOZK5J1BpjzqaIW8EKr7A3CF9RPU/7de02uEcq7+p+XOCb1f/xsR5w9LA0rP10XrhHP00kss2HfcEaM4FeV1yN4ldlKAw=="
    tags_all        = {}
}

# local_file.private_key:
resource "local_file" "private_key" {
    content              = (sensitive value)
    content_base64sha256 = "JRTFbr3R4ZXWfrOvEq25YbT4HU+e5J8JActjisBCc1c="
    content_base64sha512 = "h43wxu29faS6c87Dai0Gg+/MyUmb1atVw/WOn/uoH014v9ye/Glb8hhZtpagI4cZWWExr9o3Ca/uOvYJS72d1Q=="
    content_md5          = "d61884f9a6eb8ec3cdc8346a4a536155"
    content_sha1         = "99ee42f71b31630bcb4fbedf939efd33aac32fd0"
    content_sha256       = "2514c56ebdd1e195d67eb3af12adb961b4f81d4f9ee49f0901cb638ac0427357"
    content_sha512       = "878df0c6edbd7da4ba73cec36a2d0683efccc9499bd5ab55c3f58e9ffba81f4d78bfdc9efc695bf21859b696a0238719596131afda3709afee3af6094bbd9dd5"
    directory_permission = "0777"
    file_permission      = "0600"
    filename             = "/Users/sagi/Desktop/terraform/git/ecs_auto_deployment-/ecs-instance-key-82a5a8b2.pem"
    id                   = "99ee42f71b31630bcb4fbedf939efd33aac32fd0"
}

# local_file.rendered_user_data:
resource "local_file" "rendered_user_data" {
    content              = <<-EOT
        #!/bin/bash
        
        # Enable debugging and logging
        set -x
        exec > >(tee /var/log/user-data.log | logger -t user-data -s 2>/dev/console) 2>&1
        
        # Function for logging
        log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
        }
        
        log "Starting user data script execution"
        
        sleep 5
        
        # Function to wait for yum to be free
        wait_for_yum() {
            while sudo fuser /var/run/yum.pid > /dev/null 2>&1; do
                log "Waiting for yum to be free..."
                sleep 5
            done
        }
        
        # Update system packages
        log 'Updating system packages'
        sudo yum update -y
        wait
        
        
        # Install AWS CLI
        log "Installing AWS CLI"
        sudo yum install -y aws-cli
        wait
        
        # Set and export variables
        export CLUSTER_NAME="demo-cluster-82a5a8b2"
        export LOG_GROUP_NAME="log_group-82a5a8b2"
        export LOG_STREAM_NAME="ecs"
        export REGION="us-east-1"
        
        
        # Write environment variables to /etc/environment for persistence
        echo "CLUSTER_NAME=demo-cluster-82a5a8b2" | sudo tee -a /etc/environment
        echo "LOG_GROUP_NAME=log_group-82a5a8b2" | sudo tee -a /etc/environment
        echo "LOG_STREAM_NAME=ecs" | sudo tee -a /etc/environment
        echo "REGION=us-east-1" | sudo tee -a /etc/environment
        
        
        # # Reload environment variables to make them available in the current session
        source /etc/environment
        
        # Write environment variables to /etc/environment and /etc/ecs/ecs.config directory
        log "Setting up environment variables"
        sudo mkdir -p /etc/ecs
        sudo tee /etc/ecs/ecs.config > /dev/null <<EOF
        ECS_CLUSTER=$CLUSTER_NAME
        ECS_LOGLEVEL=debug
        ECS_LOGFILE=/var/log/ecs/ecs-agent.log
        ECS_AVAILABLE_LOGGING_DRIVERS=["json-file","awslogs"]
        ECS_ENABLE_CONTAINER_METADATA=true
        ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=1h
        ECS_IMAGE_CLEANUP_INTERVAL=10m
        ECS_ENGINE_AUTH_TYPE=docker
        
        ECS_DATADIR=/data
        ECS_ENABLE_SPOT_INSTANCE_DRAINING=true
        ECS_CONTAINER_STOP_TIMEOUT=30s
        ECS_CONTAINER_START_TIMEOUT=3m
        ECS_ENABLE_TASK_IAM_ROLE=true
        ECS_DOCKER_API_VERSION=1.24
        ECS_CONTAINER_METADATA_URI_ENDPOINT=v4
        EOF
        
        docker stop ecs-agent
        
        docker rm -f ecs-agent
        
        
        # delete the ECS agent's state file to allow it to reinitialize with the correct configuration:
        sudo rm /var/lib/ecs/data/agent.db
        
        sudo systemctl restart ecs
        
        
        # Additional verification steps
        docker info || log "Docker not running properly"
        curl -s http://localhost:51678/v1/metadata || log "ECS agent not responding"
        
        
        
        # # Update the system and install the latest ECS agent
        # yum update -y
        # amazon-linux-extras install -y ecs
        # yum install -y ecs-init
        
        # # Configure ECS cluster
        # echo "ECS_CLUSTER=MyCluster" >> /etc/ecs/ecs.config
        
        # # Start ECS service
        # systemctl enable --now ecs
        
        # # Restart Docker to ensure it's running the latest version
        # systemctl restart docker
        
        # # Wait for Docker to be fully operational
        # timeout=60
        # while [ $timeout -gt 0 ]; do
        #     if docker info &>/dev/null; then
        #         break
        #     fi
        #     sleep 1
        #     ((timeout--))
        # done
        
        # if [ $timeout -eq 0 ]; then
        #     echo "Docker did not start within the expected time frame"
        #     exit 1
        # fi
        
        # # Check the ECS agent version
        # ecs_agent_version=$(docker inspect ecs-agent | grep Version | head -n 1)
        # echo "ECS Agent Version: $ecs_agent_version"
        
        # # Verify ECS agent is running
        # if curl -s http://localhost:51678/v1/metadata &>/dev/null; then
        #     echo "ECS agent is responding"
        # else
        #     echo "ECS agent is not responding"
        # fi
        
        # echo "User data script completed"
        
        
        # # Write environment variables to /etc/environment and /etc/ecs/ecs.config directory
        # log "Setting up environment variables"
        # sudo mkdir -p /etc/ecs
        # sudo tee /etc/ecs/ecs.config > /dev/null <<EOF
        # ECS_CLUSTER=$CLUSTER_NAME
        # ECS_LOGLEVEL=debug
        # ECS_LOGFILE=/var/log/ecs/ecs-agent.log
        # ECS_AVAILABLE_LOGGING_DRIVERS=["json-file","awslogs"]
        # ECS_ENABLE_CONTAINER_METADATA=true
        # ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=1h
        # ECS_IMAGE_CLEANUP_INTERVAL=10m
        # ECS_ENGINE_AUTH_TYPE=docker
        # ECS_ENGINE_AUTH_DATA={"https://index.docker.io/v1/": {"username": "$DOCKERHUB_USERNAME", "password": "$DOCKERHUB_PASSWORD"}}
        # ECS_DATADIR=/data
        # ECS_ENABLE_SPOT_INSTANCE_DRAINING=true
        # ECS_CONTAINER_STOP_TIMEOUT=30s
        # ECS_CONTAINER_START_TIMEOUT=3m
        # ECS_ENABLE_TASK_IAM_ROLE=true
        # EOF
        
        # # Set proper permissions
        # log "Setting permissions on ECS config"
        # sudo chmod 644 /etc/ecs/ecs.config
        
        # # Create data directory
        # log "Creating ECS data directory"
        # sudo mkdir -p /data
        # sudo chmod 744 /data
        
        # # Clean up any existing ECS containers
        # log "Cleaning up existing ECS containers"
        # if command -v docker &> /dev/null; then
        #     if docker ps -a --filter name=ecs-agent | grep -q .; then
        #         docker rm -f $(docker ps -a --filter name=ecs-agent -q)
        #     fi
        # fi
        
        # # Stop and disable the default ECS service if it exists
        # log "Managing ECS services"
        # if systemctl is-active ecs.service &> /dev/null; then
        #     sudo systemctl stop ecs.service
        #     sudo systemctl disable ecs.service
        # fi
        
        # # Update and start Docker
        # log "Updating and starting Docker"
        # sudo yum update -y docker
        # sudo systemctl enable docker
        # sudo systemctl start docker
        
        # # Wait for Docker to be fully started
        # log 'Waiting for Docker to start...'
        # until sudo systemctl is-active --quiet docker; do
        #     sleep 5
        # done
        
        # # Update ECS agent
        # log "Updating ECS agent"
        # sudo yum update -y ecs-init
        # sudo systemctl stop ecs 
        # docker rm -f ecs-agent
        # rm -rf /var/lib/ecs/data/*
        # sudo systemctl enable ecs
        # sudo systemctl start ecs
        
        # # Final verification
        # log "Verifying ECS agent status"
        # sleep 10
        # sudo systemctl status ecs
        
        # # Log completion
        # log "User data script completed"
        
        # # Additional verification steps
        # docker info || log "Docker not running properly"
        # curl -s http://localhost:51678/v1/metadata || log "ECS agent not responding"
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        # # Function for logging
        # log() {
        #     echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
        # }
        
        # #install cli
        # sudo yum install -y aws-cli
        
        
        # # Function to clean up any existing ECS agent containers
        # cleanup_ecs_containers() {
        #     log "Checking for existing ECS agent containers..."
            
        #     # Stop any running ecs-agent container
        #     if docker ps -q --filter name=ecs-agent | grep -q .; then
        #         log "Found running ECS agent container. Stopping it..."
        #         sudo docker stop ecs-agent || log "Warning: Failed to stop ECS agent container"
        #     fi
            
        #     # Remove any existing ecs-agent container (running or stopped)
        #     if docker ps -a -q --filter name=ecs-agent | grep -q .; then
        #         log "Found ECS agent container. Removing it..."
        #         sudo docker rm -f ecs-agent || log "Warning: Failed to remove ECS agent container"
        #     fi
            
        #     # Double check no containers are left
        #     if docker ps -a -q --filter name=ecs-agent | grep -q .; then
        #         log "Error: Failed to remove all ECS agent containers"
        #         return 1
        #     fi
            
        #     log "ECS agent container cleanup completed successfully"
        #     return 0
        # }
        
        # # Stop the services
        # log "Stopping ECS service"
        # sudo systemctl stop docker || log "Failed to stop docker service"
        # sudo systemctl stop ecs || log "Failed to stop ECS service"
        # sleep 5
        
        # # Update Docker
        # sudo yum update docker
        
        # # Start Docker
        # sudo systemctl start docker
        
        # # Clean up any existing ECS containers before proceeding
        # if ! cleanup_ecs_containers; then
        #     log "Error: Failed to clean up existing ECS containers. Exiting."
        #     exit 1
        # fi
        
        # #Create ECS config file
        # log "Creating ECS config"
        # sudo bash -c 'cat << EOF > /etc/ecs/ecs.config
        # ECS_CLUSTER=demo-cluster-82a5a8b2
        # ECS_LOGLEVEL=debug
        # ECS_AVAILABLE_LOGGING_DRIVERS=["json-file","awslogs"]
        # ECS_ENABLE_CONTAINER_METADATA=true
        # ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=1h
        # ECS_IMAGE_CLEANUP_INTERVAL=10m
        # ECS_ENGINE_AUTH_TYPE=docker
        
        # ECS_DATADIR=/data
        # ECS_ENABLE_SPOT_INSTANCE_DRAINING=true
        # ECS_CONTAINER_STOP_TIMEOUT=30s
        # ECS_CONTAINER_START_TIMEOUT=3m
        # ECS_ENABLE_TASK_IAM_ROLE=true
        # EOF'
        
        # # Set proper permissions
        # log "Setting ECS config permissions"
        # sudo chmod 644 /etc/ecs/ecs.config
        
        
        # #restart docker
        # sudo systemctl restart docker
        
        
        # #update ecs agent
        # sudo yum update -y ecs-init
        
        # #restart ecs agent
        # sudo systemctl restart ecs
        
        
        # Start ECS agent with platform specification
        # sudo systemctl start ecs
        # log "Starting ECS agent container"
        # sudo docker run --name ecs-agent \
        #     --detach=true \
        #     --restart=on-failure:10 \
        #     --volume=/var/run:/var/run \
        #     --volume=/var/log/ecs:/log \
        #     --volume=/var/lib/ecs/data:/data \
        #     --volume=/etc/ecs:/etc/ecs \
        #     --net=host \
        #     --env-file=/etc/ecs/ecs.config \
        #     --platform linux/amd64 \
        #     public.ecr.aws/ecs/amazon-ecs-agent:latest
    EOT
    content_base64sha256 = "aSL2eQjm2nPcJAdEd+t8Ot5telHGbfFbN3R0v9fsaTw="
    content_base64sha512 = "+hYb9q8pSBcF2oniT6xTcK0xCchkmjFPcgH2saWxy4Fg5wf0QNxMtMDJLzQNrDYrkrsIa0POyzR2s6AJ8YtNuw=="
    content_md5          = "c7453433c96419f51bba9d2c710a4aa3"
    content_sha1         = "8b0e2faebf62ae8c4248648550897cb7ffd72fd0"
    content_sha256       = "6922f67908e6da73dc24074477eb7c3ade6d7a51c66df15b377474bfd7ec693c"
    content_sha512       = "fa161bf6af29481705da89e24fac5370ad3109c8649a314f7201f6b1a5b1cb8160e707f440dc4cb4c0c92f340dac362b92bb086b43cecb3476b3a009f18b4dbb"
    directory_permission = "0777"
    file_permission      = "0777"
    filename             = "./rendered_user_data.sh"
    id                   = "8b0e2faebf62ae8c4248648550897cb7ffd72fd0"
}

# local_file.user_data:
resource "local_file" "user_data" {
    content              = <<-EOT
        # Generated on: 2024-12-31 14:03:39 UTC
        # Cluster: demo-cluster-82a5a8b2
        # Region: us-east-1
        
        #!/bin/bash
        
        # Enable debugging and logging
        set -x
        exec > >(tee /var/log/user-data.log | logger -t user-data -s 2>/dev/console) 2>&1
        
        # Function for logging
        log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
        }
        
        log "Starting user data script execution"
        
        sleep 5
        
        # Function to wait for yum to be free
        wait_for_yum() {
            while sudo fuser /var/run/yum.pid > /dev/null 2>&1; do
                log "Waiting for yum to be free..."
                sleep 5
            done
        }
        
        # Update system packages
        log 'Updating system packages'
        sudo yum update -y
        wait
        
        
        # Install AWS CLI
        log "Installing AWS CLI"
        sudo yum install -y aws-cli
        wait
        
        # Set and export variables
        export CLUSTER_NAME="demo-cluster-82a5a8b2"
        export LOG_GROUP_NAME="log_group-82a5a8b2"
        export LOG_STREAM_NAME="ecs"
        export REGION="us-east-1"
        
        
        # Write environment variables to /etc/environment for persistence
        echo "CLUSTER_NAME=demo-cluster-82a5a8b2" | sudo tee -a /etc/environment
        echo "LOG_GROUP_NAME=log_group-82a5a8b2" | sudo tee -a /etc/environment
        echo "LOG_STREAM_NAME=ecs" | sudo tee -a /etc/environment
        echo "REGION=us-east-1" | sudo tee -a /etc/environment
        
        
        # # Reload environment variables to make them available in the current session
        source /etc/environment
        
        # Write environment variables to /etc/environment and /etc/ecs/ecs.config directory
        log "Setting up environment variables"
        sudo mkdir -p /etc/ecs
        sudo tee /etc/ecs/ecs.config > /dev/null <<EOF
        ECS_CLUSTER=$CLUSTER_NAME
        ECS_LOGLEVEL=debug
        ECS_LOGFILE=/var/log/ecs/ecs-agent.log
        ECS_AVAILABLE_LOGGING_DRIVERS=["json-file","awslogs"]
        ECS_ENABLE_CONTAINER_METADATA=true
        ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=1h
        ECS_IMAGE_CLEANUP_INTERVAL=10m
        ECS_ENGINE_AUTH_TYPE=docker
        
        ECS_DATADIR=/data
        ECS_ENABLE_SPOT_INSTANCE_DRAINING=true
        ECS_CONTAINER_STOP_TIMEOUT=30s
        ECS_CONTAINER_START_TIMEOUT=3m
        ECS_ENABLE_TASK_IAM_ROLE=true
        ECS_DOCKER_API_VERSION=1.24
        ECS_CONTAINER_METADATA_URI_ENDPOINT=v4
        EOF
        
        docker stop ecs-agent
        
        docker rm -f ecs-agent
        
        
        # delete the ECS agent's state file to allow it to reinitialize with the correct configuration:
        sudo rm /var/lib/ecs/data/agent.db
        
        sudo systemctl restart ecs
        
        
        # Additional verification steps
        docker info || log "Docker not running properly"
        curl -s http://localhost:51678/v1/metadata || log "ECS agent not responding"
        
        
        
        # # Update the system and install the latest ECS agent
        # yum update -y
        # amazon-linux-extras install -y ecs
        # yum install -y ecs-init
        
        # # Configure ECS cluster
        # echo "ECS_CLUSTER=MyCluster" >> /etc/ecs/ecs.config
        
        # # Start ECS service
        # systemctl enable --now ecs
        
        # # Restart Docker to ensure it's running the latest version
        # systemctl restart docker
        
        # # Wait for Docker to be fully operational
        # timeout=60
        # while [ $timeout -gt 0 ]; do
        #     if docker info &>/dev/null; then
        #         break
        #     fi
        #     sleep 1
        #     ((timeout--))
        # done
        
        # if [ $timeout -eq 0 ]; then
        #     echo "Docker did not start within the expected time frame"
        #     exit 1
        # fi
        
        # # Check the ECS agent version
        # ecs_agent_version=$(docker inspect ecs-agent | grep Version | head -n 1)
        # echo "ECS Agent Version: $ecs_agent_version"
        
        # # Verify ECS agent is running
        # if curl -s http://localhost:51678/v1/metadata &>/dev/null; then
        #     echo "ECS agent is responding"
        # else
        #     echo "ECS agent is not responding"
        # fi
        
        # echo "User data script completed"
        
        
        # # Write environment variables to /etc/environment and /etc/ecs/ecs.config directory
        # log "Setting up environment variables"
        # sudo mkdir -p /etc/ecs
        # sudo tee /etc/ecs/ecs.config > /dev/null <<EOF
        # ECS_CLUSTER=$CLUSTER_NAME
        # ECS_LOGLEVEL=debug
        # ECS_LOGFILE=/var/log/ecs/ecs-agent.log
        # ECS_AVAILABLE_LOGGING_DRIVERS=["json-file","awslogs"]
        # ECS_ENABLE_CONTAINER_METADATA=true
        # ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=1h
        # ECS_IMAGE_CLEANUP_INTERVAL=10m
        # ECS_ENGINE_AUTH_TYPE=docker
        # ECS_ENGINE_AUTH_DATA={"https://index.docker.io/v1/": {"username": "$DOCKERHUB_USERNAME", "password": "$DOCKERHUB_PASSWORD"}}
        # ECS_DATADIR=/data
        # ECS_ENABLE_SPOT_INSTANCE_DRAINING=true
        # ECS_CONTAINER_STOP_TIMEOUT=30s
        # ECS_CONTAINER_START_TIMEOUT=3m
        # ECS_ENABLE_TASK_IAM_ROLE=true
        # EOF
        
        # # Set proper permissions
        # log "Setting permissions on ECS config"
        # sudo chmod 644 /etc/ecs/ecs.config
        
        # # Create data directory
        # log "Creating ECS data directory"
        # sudo mkdir -p /data
        # sudo chmod 744 /data
        
        # # Clean up any existing ECS containers
        # log "Cleaning up existing ECS containers"
        # if command -v docker &> /dev/null; then
        #     if docker ps -a --filter name=ecs-agent | grep -q .; then
        #         docker rm -f $(docker ps -a --filter name=ecs-agent -q)
        #     fi
        # fi
        
        # # Stop and disable the default ECS service if it exists
        # log "Managing ECS services"
        # if systemctl is-active ecs.service &> /dev/null; then
        #     sudo systemctl stop ecs.service
        #     sudo systemctl disable ecs.service
        # fi
        
        # # Update and start Docker
        # log "Updating and starting Docker"
        # sudo yum update -y docker
        # sudo systemctl enable docker
        # sudo systemctl start docker
        
        # # Wait for Docker to be fully started
        # log 'Waiting for Docker to start...'
        # until sudo systemctl is-active --quiet docker; do
        #     sleep 5
        # done
        
        # # Update ECS agent
        # log "Updating ECS agent"
        # sudo yum update -y ecs-init
        # sudo systemctl stop ecs 
        # docker rm -f ecs-agent
        # rm -rf /var/lib/ecs/data/*
        # sudo systemctl enable ecs
        # sudo systemctl start ecs
        
        # # Final verification
        # log "Verifying ECS agent status"
        # sleep 10
        # sudo systemctl status ecs
        
        # # Log completion
        # log "User data script completed"
        
        # # Additional verification steps
        # docker info || log "Docker not running properly"
        # curl -s http://localhost:51678/v1/metadata || log "ECS agent not responding"
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        # # Function for logging
        # log() {
        #     echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
        # }
        
        # #install cli
        # sudo yum install -y aws-cli
        
        
        # # Function to clean up any existing ECS agent containers
        # cleanup_ecs_containers() {
        #     log "Checking for existing ECS agent containers..."
            
        #     # Stop any running ecs-agent container
        #     if docker ps -q --filter name=ecs-agent | grep -q .; then
        #         log "Found running ECS agent container. Stopping it..."
        #         sudo docker stop ecs-agent || log "Warning: Failed to stop ECS agent container"
        #     fi
            
        #     # Remove any existing ecs-agent container (running or stopped)
        #     if docker ps -a -q --filter name=ecs-agent | grep -q .; then
        #         log "Found ECS agent container. Removing it..."
        #         sudo docker rm -f ecs-agent || log "Warning: Failed to remove ECS agent container"
        #     fi
            
        #     # Double check no containers are left
        #     if docker ps -a -q --filter name=ecs-agent | grep -q .; then
        #         log "Error: Failed to remove all ECS agent containers"
        #         return 1
        #     fi
            
        #     log "ECS agent container cleanup completed successfully"
        #     return 0
        # }
        
        # # Stop the services
        # log "Stopping ECS service"
        # sudo systemctl stop docker || log "Failed to stop docker service"
        # sudo systemctl stop ecs || log "Failed to stop ECS service"
        # sleep 5
        
        # # Update Docker
        # sudo yum update docker
        
        # # Start Docker
        # sudo systemctl start docker
        
        # # Clean up any existing ECS containers before proceeding
        # if ! cleanup_ecs_containers; then
        #     log "Error: Failed to clean up existing ECS containers. Exiting."
        #     exit 1
        # fi
        
        # #Create ECS config file
        # log "Creating ECS config"
        # sudo bash -c 'cat << EOF > /etc/ecs/ecs.config
        # ECS_CLUSTER=demo-cluster-82a5a8b2
        # ECS_LOGLEVEL=debug
        # ECS_AVAILABLE_LOGGING_DRIVERS=["json-file","awslogs"]
        # ECS_ENABLE_CONTAINER_METADATA=true
        # ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=1h
        # ECS_IMAGE_CLEANUP_INTERVAL=10m
        # ECS_ENGINE_AUTH_TYPE=docker
        
        # ECS_DATADIR=/data
        # ECS_ENABLE_SPOT_INSTANCE_DRAINING=true
        # ECS_CONTAINER_STOP_TIMEOUT=30s
        # ECS_CONTAINER_START_TIMEOUT=3m
        # ECS_ENABLE_TASK_IAM_ROLE=true
        # EOF'
        
        # # Set proper permissions
        # log "Setting ECS config permissions"
        # sudo chmod 644 /etc/ecs/ecs.config
        
        
        # #restart docker
        # sudo systemctl restart docker
        
        
        # #update ecs agent
        # sudo yum update -y ecs-init
        
        # #restart ecs agent
        # sudo systemctl restart ecs
        
        
        # Start ECS agent with platform specification
        # sudo systemctl start ecs
        # log "Starting ECS agent container"
        # sudo docker run --name ecs-agent \
        #     --detach=true \
        #     --restart=on-failure:10 \
        #     --volume=/var/run:/var/run \
        #     --volume=/var/log/ecs:/log \
        #     --volume=/var/lib/ecs/data:/data \
        #     --volume=/etc/ecs:/etc/ecs \
        #     --net=host \
        #     --env-file=/etc/ecs/ecs.config \
        #     --platform linux/amd64 \
        #     public.ecr.aws/ecs/amazon-ecs-agent:latest
    EOT
    content_base64sha256 = "MUpwpoKhcjGSM2nP9rJiY2huqgLe4bXanI83cV5kjMU="
    content_base64sha512 = "jp8NM3gVaeIZMylpxmGNV1Z/y4miMMDC0ml7s+arMIplCMlIKst66jyqSFN8RM5NRTIaWgUPEBIEiZiTamau8A=="
    content_md5          = "64347ab3a0db9b4e23b188bde36d3597"
    content_sha1         = "fbb9597a224194db98f9aa7899f0feebfcdb7799"
    content_sha256       = "314a70a682a17231923369cff6b26263686eaa02dee1b5da9c8f37715e648cc5"
    content_sha512       = "8e9f0d33781569e219332969c6618d57567fcb89a230c0c2d2697bb3e6ab308a6508c9482acb7aea3caa48537c44ce4d45321a5a050f1012048998936a66aef0"
    directory_permission = "0777"
    file_permission      = "0644"
    filename             = "./rendered_user_data.sh"
    id                   = "fbb9597a224194db98f9aa7899f0feebfcdb7799"
}

# null_resource.check_task_status:
resource "null_resource" "check_task_status" {
    id       = "6481762651072464067"
    triggers = {
        "service_id" = "arn:aws:ecs:us-east-1:010575877879:service/demo-cluster-82a5a8b2/demo-ecs-Nservice-82a5a8b2"
    }
}

# null_resource.cluster_ready:
resource "null_resource" "cluster_ready" {
    id       = "3789856090304683255"
    triggers = {
        "cluster_id" = "arn:aws:ecs:us-east-1:010575877879:cluster/demo-cluster-82a5a8b2"
    }
}

# null_resource.eip_disassociation[0]:
resource "null_resource" "eip_disassociation" {
    id       = "3992171096546840607"
    triggers = {
        "eip_id" = "eipalloc-09a44f9729329b8c7"
    }
}

# null_resource.eip_disassociation[1]:
resource "null_resource" "eip_disassociation" {
    id       = "7117950326029446924"
    triggers = {
        "eip_id" = "eipalloc-0e31ca1c5078f51a7"
    }
}

# null_resource.force_ecs_service_cleanup:
resource "null_resource" "force_ecs_service_cleanup" {
    id       = "3236407909013232021"
    triggers = {
        "cluster_name"        = "demo-cluster-82a5a8b2"
        "nodejs_service_name" = "ECS-s-node"
        "service_name"        = "demo-ecs-Nservice-82a5a8b2"
    }
}

# random_id.unique:
resource "random_id" "unique" {
    b64_std     = "gqWosg=="
    b64_url     = "gqWosg"
    byte_length = 4
    dec         = "2191894706"
    hex         = "82a5a8b2"
    id          = "gqWosg"
}

# tls_private_key.ssh_key:
resource "tls_private_key" "ssh_key" {
    algorithm                     = "RSA"
    ecdsa_curve                   = "P224"
    id                            = "40043ef7c68dca0d0713735ed73ee0e4961557d0"
    private_key_openssh           = (sensitive value)
    private_key_pem               = (sensitive value)
    private_key_pem_pkcs8         = (sensitive value)
    public_key_fingerprint_md5    = "d6:bc:3c:02:2f:3e:ce:31:3f:90:ad:db:11:8e:4e:ac"
    public_key_fingerprint_sha256 = "SHA256:cwkQlmVcgUnS8smrb19pYpKe/ppIByLG9bd1F/uDhZw"
    public_key_openssh            = <<-EOT
        ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDc/4j48g9FD9j0YdipsFQ+34IzQTafnd8liReWorO6HiWTKeZ2XyldbqHh8COGJt5gj9VMM48QKATxVByqS/XuYsLuzJesIrRLosl9aIdSTiVWAOfuWBKEtev34AhSe3/A0udIv5kXDdrCE5QXUHSlYYUKLwunqhicUaxqAShXLCPIDOza5ER4NdyVMIrtzHsdKUHisGX7NPTT3iaCsyrhrZFtGiwJ1KsdmgilEZ9FIT9I5aA8dYInGw679UytkZEEVcMGKeW/qixcmURoC/D4vo5A3dPZt/bdjMDDLhNZgOh9KFJFhqdcz08JNndT0y2nmdRqM2a5/NZGjlfUnJ6E0e4xPK8IuPC4SKO5MQaZdBM8OJoeID0IX4Kn33B+B5X1f8PbH7qvF9jDTFreQLh8Jg5ox8n4py53u3DfYJE5Vyeeoq32sr0jshRGw+lgPtxY8Rq6H5Cgaz3MyGpawSyZoSNfOjjISje2HnqrKxicMRzGWoNSubkTfAvlOS+3VV+caBBLYJLS4WDERGRzABPIKuzpZUfKcbnWqbx0rYw7bqYkelh1LuVZTjhhgMJ/+Y+2UsOSup/sWXDUgeOZK5J1BpjzqaIW8EKr7A3CF9RPU/7de02uEcq7+p+XOCb1f/xsR5w9LA0rP10XrhHP00kss2HfcEaM4FeV1yN4ldlKAw==
    EOT
    public_key_pem                = <<-EOT
        -----BEGIN PUBLIC KEY-----
        MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA3P+I+PIPRQ/Y9GHYqbBU
        Pt+CM0E2n53fJYkXlqKzuh4lkynmdl8pXW6h4fAjhibeYI/VTDOPECgE8VQcqkv1
        7mLC7syXrCK0S6LJfWiHUk4lVgDn7lgShLXr9+AIUnt/wNLnSL+ZFw3awhOUF1B0
        pWGFCi8Lp6oYnFGsagEoVywjyAzs2uREeDXclTCK7cx7HSlB4rBl+zT0094mgrMq
        4a2RbRosCdSrHZoIpRGfRSE/SOWgPHWCJxsOu/VMrZGRBFXDBinlv6osXJlEaAvw
        +L6OQN3T2bf23YzAwy4TWYDofShSRYanXM9PCTZ3U9Mtp5nUajNmufzWRo5X1Jye
        hNHuMTyvCLjwuEijuTEGmXQTPDiaHiA9CF+Cp99wfgeV9X/D2x+6rxfYw0xa3kC4
        fCYOaMfJ+Kcud7tw32CROVcnnqKt9rK9I7IURsPpYD7cWPEauh+QoGs9zMhqWsEs
        maEjXzo4yEo3th56qysYnDEcxlqDUrm5E3wL5Tkvt1VfnGgQS2CS0uFgxERkcwAT
        yCrs6WVHynG51qm8dK2MO26mJHpYdS7lWU44YYDCf/mPtlLDkrqf7Flw1IHjmSuS
        dQaY86miFvBCq+wNwhfUT1P+3XtNrhHKu/qflzgm9X/8bEecPSwNKz9dF64Rz9NJ
        LLNh33BGjOBXldcjeJXZSgMCAwEAAQ==
        -----END PUBLIC KEY-----
    EOT
    rsa_bits                      = 4096
}


# module.alb.aws_autoscaling_attachment.asg_attachment:
resource "aws_autoscaling_attachment" "asg_attachment" {
    autoscaling_group_name = "demo-asg-82a5a8b2-asg"
    id                     = "demo-asg-82a5a8b2-asg-20241231140404977900000021"
    lb_target_group_arn    = "arn:aws:elasticloadbalancing:us-east-1:010575877879:targetgroup/tg-ec2-demo-alb-82a5a8b2-c7e6/cdb7fe75898b0781"
}

# module.alb.aws_lb.main:
resource "aws_lb" "main" {
    arn                                                          = "arn:aws:elasticloadbalancing:us-east-1:010575877879:loadbalancer/app/demo-alb-82a5a8b2/fb7828d8a6aa2c12"
    arn_suffix                                                   = "app/demo-alb-82a5a8b2/fb7828d8a6aa2c12"
    client_keep_alive                                            = 3600
    customer_owned_ipv4_pool                                     = [90mnull[0m[0m
    desync_mitigation_mode                                       = "defensive"
    dns_name                                                     = "demo-alb-82a5a8b2-60644634.us-east-1.elb.amazonaws.com"
    drop_invalid_header_fields                                   = false
    enable_cross_zone_load_balancing                             = true
    enable_deletion_protection                                   = false
    enable_http2                                                 = true
    enable_tls_version_and_cipher_suite_headers                  = false
    enable_waf_fail_open                                         = false
    enable_xff_client_port                                       = false
    enable_zonal_shift                                           = false
    enforce_security_group_inbound_rules_on_private_link_traffic = [90mnull[0m[0m
    id                                                           = "arn:aws:elasticloadbalancing:us-east-1:010575877879:loadbalancer/app/demo-alb-82a5a8b2/fb7828d8a6aa2c12"
    idle_timeout                                                 = 60
    internal                                                     = false
    ip_address_type                                              = "ipv4"
    load_balancer_type                                           = "application"
    name                                                         = "demo-alb-82a5a8b2"
    name_prefix                                                  = [90mnull[0m[0m
    preserve_host_header                                         = false
    security_groups                                              = [
        "sg-03227ddbd51f7f07d",
    ]
    subnets                                                      = [
        "subnet-04bd9aa18e82fd83e",
        "subnet-0e14e0a9592a6fad8",
    ]
    tags                                                         = {
        "Name" = "demo-alb-82a5a8b2"
    }
    tags_all                                                     = {
        "Name" = "demo-alb-82a5a8b2"
    }
    vpc_id                                                       = "vpc-057f028812bd7c22f"
    xff_header_processing_mode                                   = "append"
    zone_id                                                      = "Z35SXDOTRQ7X7K"

    access_logs {
        bucket  = [90mnull[0m[0m
        enabled = false
        prefix  = [90mnull[0m[0m
    }

    connection_logs {
        bucket  = [90mnull[0m[0m
        enabled = false
        prefix  = [90mnull[0m[0m
    }

    subnet_mapping {
        allocation_id        = [90mnull[0m[0m
        ipv6_address         = [90mnull[0m[0m
        outpost_id           = [90mnull[0m[0m
        private_ipv4_address = [90mnull[0m[0m
        subnet_id            = "subnet-04bd9aa18e82fd83e"
    }
    subnet_mapping {
        allocation_id        = [90mnull[0m[0m
        ipv6_address         = [90mnull[0m[0m
        outpost_id           = [90mnull[0m[0m
        private_ipv4_address = [90mnull[0m[0m
        subnet_id            = "subnet-0e14e0a9592a6fad8"
    }

    timeouts {
        create = "30m"
        delete = "30m"
        update = "30m"
    }
}

# module.alb.aws_lb_listener.alb_ec2:
resource "aws_lb_listener" "alb_ec2" {
    arn               = "arn:aws:elasticloadbalancing:us-east-1:010575877879:listener/app/demo-alb-82a5a8b2/fb7828d8a6aa2c12/7c5efe6cfbacb302"
    id                = "arn:aws:elasticloadbalancing:us-east-1:010575877879:listener/app/demo-alb-82a5a8b2/fb7828d8a6aa2c12/7c5efe6cfbacb302"
    load_balancer_arn = "arn:aws:elasticloadbalancing:us-east-1:010575877879:loadbalancer/app/demo-alb-82a5a8b2/fb7828d8a6aa2c12"
    port              = 80
    protocol          = "HTTP"
    ssl_policy        = [90mnull[0m[0m
    tags_all          = {}

    default_action {
        order            = 1
        target_group_arn = "arn:aws:elasticloadbalancing:us-east-1:010575877879:targetgroup/tg-ec2-demo-alb-82a5a8b2-c7e6/cdb7fe75898b0781"
        type             = "forward"
    }
}

# module.alb.aws_lb_listener_rule.nginx_ecs:
resource "aws_lb_listener_rule" "nginx_ecs" {
    arn          = "arn:aws:elasticloadbalancing:us-east-1:010575877879:listener-rule/app/demo-alb-82a5a8b2/fb7828d8a6aa2c12/7c5efe6cfbacb302/27b75b1202589754"
    id           = "arn:aws:elasticloadbalancing:us-east-1:010575877879:listener-rule/app/demo-alb-82a5a8b2/fb7828d8a6aa2c12/7c5efe6cfbacb302/27b75b1202589754"
    listener_arn = "arn:aws:elasticloadbalancing:us-east-1:010575877879:listener/app/demo-alb-82a5a8b2/fb7828d8a6aa2c12/7c5efe6cfbacb302"
    priority     = 90
    tags_all     = {}

    action {
        order            = 1
        target_group_arn = "arn:aws:elasticloadbalancing:us-east-1:010575877879:targetgroup/tg-ecs-demo-alb-82a5a8b2-c7e6/9e8ddbe44bcdc2fe"
        type             = "forward"
    }

    condition {
        path_pattern {
            values = [
                "/ecs/*",
            ]
        }
    }
}

# module.alb.aws_lb_listener_rule.nodejs_ecs:
resource "aws_lb_listener_rule" "nodejs_ecs" {
    arn          = "arn:aws:elasticloadbalancing:us-east-1:010575877879:listener-rule/app/demo-alb-82a5a8b2/fb7828d8a6aa2c12/7c5efe6cfbacb302/12fee21ec202ffaa"
    id           = "arn:aws:elasticloadbalancing:us-east-1:010575877879:listener-rule/app/demo-alb-82a5a8b2/fb7828d8a6aa2c12/7c5efe6cfbacb302/12fee21ec202ffaa"
    listener_arn = "arn:aws:elasticloadbalancing:us-east-1:010575877879:listener/app/demo-alb-82a5a8b2/fb7828d8a6aa2c12/7c5efe6cfbacb302"
    priority     = 100
    tags_all     = {}

    action {
        order            = 1
        target_group_arn = "arn:aws:elasticloadbalancing:us-east-1:010575877879:targetgroup/tg-nodejs-demo-alb-82a5a8b2-c7e6/142d4d7ea8f3b578"
        type             = "forward"
    }

    condition {
        path_pattern {
            values = [
                "/*",
            ]
        }
    }
}

# module.alb.aws_lb_target_group.ec2:
resource "aws_lb_target_group" "ec2" {
    arn                                = "arn:aws:elasticloadbalancing:us-east-1:010575877879:targetgroup/tg-ec2-demo-alb-82a5a8b2-c7e6/cdb7fe75898b0781"
    arn_suffix                         = "targetgroup/tg-ec2-demo-alb-82a5a8b2-c7e6/cdb7fe75898b0781"
    deregistration_delay               = "300"
    id                                 = "arn:aws:elasticloadbalancing:us-east-1:010575877879:targetgroup/tg-ec2-demo-alb-82a5a8b2-c7e6/cdb7fe75898b0781"
    ip_address_type                    = "ipv4"
    lambda_multi_value_headers_enabled = false
    load_balancer_arns                 = []
    load_balancing_algorithm_type      = "round_robin"
    load_balancing_anomaly_mitigation  = "off"
    load_balancing_cross_zone_enabled  = "use_load_balancer_configuration"
    name                               = "tg-ec2-demo-alb-82a5a8b2-c7e6"
    name_prefix                        = [90mnull[0m[0m
    port                               = 80
    protocol                           = "HTTP"
    protocol_version                   = "HTTP1"
    proxy_protocol_v2                  = false
    slow_start                         = 0
    tags                               = {
        "Name" = "ec2-tg-demo-alb-82a5a8b2"
    }
    tags_all                           = {
        "Name" = "ec2-tg-demo-alb-82a5a8b2"
    }
    target_type                        = "instance"
    vpc_id                             = "vpc-057f028812bd7c22f"

    health_check {
        enabled             = true
        healthy_threshold   = 2
        interval            = 60
        matcher             = "200,301,302"
        path                = "/"
        port                = "traffic-port"
        protocol            = "HTTP"
        timeout             = 30
        unhealthy_threshold = 10
    }

    stickiness {
        cookie_duration = 120
        cookie_name     = [90mnull[0m[0m
        enabled         = true
        type            = "lb_cookie"
    }

    target_failover {}

    target_group_health {
        dns_failover {
            minimum_healthy_targets_count      = "1"
            minimum_healthy_targets_percentage = "off"
        }
        unhealthy_state_routing {
            minimum_healthy_targets_count      = 1
            minimum_healthy_targets_percentage = "off"
        }
    }

    target_health_state {}
}

# module.alb.aws_lb_target_group.nginx_ecs:
resource "aws_lb_target_group" "nginx_ecs" {
    arn                                = "arn:aws:elasticloadbalancing:us-east-1:010575877879:targetgroup/tg-ecs-demo-alb-82a5a8b2-c7e6/9e8ddbe44bcdc2fe"
    arn_suffix                         = "targetgroup/tg-ecs-demo-alb-82a5a8b2-c7e6/9e8ddbe44bcdc2fe"
    deregistration_delay               = "300"
    id                                 = "arn:aws:elasticloadbalancing:us-east-1:010575877879:targetgroup/tg-ecs-demo-alb-82a5a8b2-c7e6/9e8ddbe44bcdc2fe"
    ip_address_type                    = "ipv4"
    lambda_multi_value_headers_enabled = false
    load_balancer_arns                 = []
    load_balancing_algorithm_type      = "round_robin"
    load_balancing_anomaly_mitigation  = "off"
    load_balancing_cross_zone_enabled  = "use_load_balancer_configuration"
    name                               = "tg-ecs-demo-alb-82a5a8b2-c7e6"
    name_prefix                        = [90mnull[0m[0m
    port                               = 80
    protocol                           = "HTTP"
    protocol_version                   = "HTTP1"
    proxy_protocol_v2                  = false
    slow_start                         = 0
    tags                               = {
        "Name" = "ecs-tg-nginxdemo-alb-82a5a8b2"
    }
    tags_all                           = {
        "Name" = "ecs-tg-nginxdemo-alb-82a5a8b2"
    }
    target_type                        = "instance"
    vpc_id                             = "vpc-057f028812bd7c22f"

    health_check {
        enabled             = true
        healthy_threshold   = 2
        interval            = 30
        matcher             = "200"
        path                = "/health"
        port                = "traffic-port"
        protocol            = "HTTP"
        timeout             = 5
        unhealthy_threshold = 3
    }

    stickiness {
        cookie_duration = 120
        cookie_name     = [90mnull[0m[0m
        enabled         = true
        type            = "lb_cookie"
    }

    target_failover {}

    target_group_health {
        dns_failover {
            minimum_healthy_targets_count      = "1"
            minimum_healthy_targets_percentage = "off"
        }
        unhealthy_state_routing {
            minimum_healthy_targets_count      = 1
            minimum_healthy_targets_percentage = "off"
        }
    }

    target_health_state {}
}

# module.alb.aws_lb_target_group.nodejs_ecs:
resource "aws_lb_target_group" "nodejs_ecs" {
    arn                                = "arn:aws:elasticloadbalancing:us-east-1:010575877879:targetgroup/tg-nodejs-demo-alb-82a5a8b2-c7e6/142d4d7ea8f3b578"
    arn_suffix                         = "targetgroup/tg-nodejs-demo-alb-82a5a8b2-c7e6/142d4d7ea8f3b578"
    deregistration_delay               = "300"
    id                                 = "arn:aws:elasticloadbalancing:us-east-1:010575877879:targetgroup/tg-nodejs-demo-alb-82a5a8b2-c7e6/142d4d7ea8f3b578"
    ip_address_type                    = "ipv4"
    lambda_multi_value_headers_enabled = false
    load_balancer_arns                 = []
    load_balancing_algorithm_type      = "round_robin"
    load_balancing_anomaly_mitigation  = "off"
    load_balancing_cross_zone_enabled  = "use_load_balancer_configuration"
    name                               = "tg-nodejs-demo-alb-82a5a8b2-c7e6"
    name_prefix                        = [90mnull[0m[0m
    port                               = 3000
    protocol                           = "HTTP"
    protocol_version                   = "HTTP1"
    proxy_protocol_v2                  = false
    slow_start                         = 0
    tags                               = {
        "Name" = "nodejs-ecs-tg-demo-alb-82a5a8b2"
    }
    tags_all                           = {
        "Name" = "nodejs-ecs-tg-demo-alb-82a5a8b2"
    }
    target_type                        = "instance"
    vpc_id                             = "vpc-057f028812bd7c22f"

    health_check {
        enabled             = true
        healthy_threshold   = 2
        interval            = 30
        matcher             = "200,301,302"
        path                = "/health"
        port                = "traffic-port"
        protocol            = "HTTP"
        timeout             = 5
        unhealthy_threshold = 3
    }

    stickiness {
        cookie_duration = 120
        cookie_name     = [90mnull[0m[0m
        enabled         = true
        type            = "lb_cookie"
    }

    target_failover {}

    target_group_health {
        dns_failover {
            minimum_healthy_targets_count      = "1"
            minimum_healthy_targets_percentage = "off"
        }
        unhealthy_state_routing {
            minimum_healthy_targets_count      = 1
            minimum_healthy_targets_percentage = "off"
        }
    }

    target_health_state {}
}

# module.alb.aws_security_group.ec2:
resource "aws_security_group" "ec2" {
    arn                    = "arn:aws:ec2:us-east-1:010575877879:security-group/sg-024b01834658e0dfb"
    description            = "security_group for web server instance"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = "Allow all outbound internet traffic"
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
        {
            cidr_blocks      = [
                "10.0.2.0/24",
            ]
            description      = [90mnull[0m[0m
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
        {
            cidr_blocks      = [
                "10.0.2.0/24",
            ]
            description      = "Allow HTTP to private subnet"
            from_port        = 80
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 80
        },
        {
            cidr_blocks      = [
                "10.0.2.0/24",
            ]
            description      = "Allow SSH to private subnet"
            from_port        = 22
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 22
        },
    ]
    id                     = "sg-024b01834658e0dfb"
    ingress                = [
        {
            cidr_blocks      = [
                "10.0.2.0/24",
            ]
            description      = [90mnull[0m[0m
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
        {
            cidr_blocks      = [
                "10.0.2.0/24",
            ]
            description      = "Allow HTTP from private subnet"
            from_port        = 80
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 80
        },
        {
            cidr_blocks      = [
                "10.0.2.0/24",
            ]
            description      = "Allow SSH from private subnet"
            from_port        = 22
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 22
        },
        {
            cidr_blocks      = []
            description      = [90mnull[0m[0m
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = [
                "sg-03227ddbd51f7f07d",
            ]
            self             = false
            to_port          = 0
        },
        {
            cidr_blocks      = []
            description      = [90mnull[0m[0m
            from_port        = 80
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-03227ddbd51f7f07d",
            ]
            self             = false
            to_port          = 80
        },
    ]
    name                   = "http-sg-2024123114032268110000001d"
    name_prefix            = "http-sg-"
    owner_id               = "010575877879"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "alb2ec2-sg-demo-alb-82a5a8b2"
    }
    tags_all               = {
        "Name" = "alb2ec2-sg-demo-alb-82a5a8b2"
    }
    vpc_id                 = "vpc-057f028812bd7c22f"
}

# module.alb.aws_security_group.http:
resource "aws_security_group" "http" {
    arn                    = "arn:aws:ec2:us-east-1:010575877879:security-group/sg-03227ddbd51f7f07d"
    description            = "Allow all HTTP/HTTPS traffic from public"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = [90mnull[0m[0m
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-03227ddbd51f7f07d"
    ingress                = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = [90mnull[0m[0m
            from_port        = 22
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 22
        },
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = [90mnull[0m[0m
            from_port        = 443
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 443
        },
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = [90mnull[0m[0m
            from_port        = 80
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 80
        },
    ]
    name                   = "http-sg-20241231140318964800000019"
    name_prefix            = "http-sg-"
    owner_id               = "010575877879"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "http-sg-demo-alb-82a5a8b2"
    }
    tags_all               = {
        "Name" = "http-sg-demo-alb-82a5a8b2"
    }
    vpc_id                 = "vpc-057f028812bd7c22f"
}

# module.alb.aws_security_group.nginx_ecs_tasks:
resource "aws_security_group" "nginx_ecs_tasks" {
    arn                    = "arn:aws:ec2:us-east-1:010575877879:security-group/sg-0f8571b0fc3221e81"
    description            = "Security group for ECS tasks"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = [90mnull[0m[0m
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-0f8571b0fc3221e81"
    ingress                = [
        {
            cidr_blocks      = []
            description      = [90mnull[0m[0m
            from_port        = 3000
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-03227ddbd51f7f07d",
            ]
            self             = false
            to_port          = 3000
        },
        {
            cidr_blocks      = []
            description      = [90mnull[0m[0m
            from_port        = 80
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-03227ddbd51f7f07d",
            ]
            self             = false
            to_port          = 80
        },
    ]
    name                   = "ecs-tasks-sg-2024123114032267140000001b"
    name_prefix            = "ecs-tasks-sg-"
    owner_id               = "010575877879"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "ecs-tasks-sg-demo-alb-82a5a8b2"
    }
    tags_all               = {
        "Name" = "ecs-tasks-sg-demo-alb-82a5a8b2"
    }
    vpc_id                 = "vpc-057f028812bd7c22f"
}

# module.alb.aws_security_group.nodejs_ecs_tasks:
resource "aws_security_group" "nodejs_ecs_tasks" {
    arn                    = "arn:aws:ec2:us-east-1:010575877879:security-group/sg-09876fbb4ba7178f6"
    description            = "Security group for nodejs ECS tasks"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = [90mnull[0m[0m
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-09876fbb4ba7178f6"
    ingress                = [
        {
            cidr_blocks      = []
            description      = [90mnull[0m[0m
            from_port        = 3000
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-03227ddbd51f7f07d",
            ]
            self             = false
            to_port          = 3000
        },
    ]
    name                   = "nodejs-ecs-tasks-sg-2024123114032267030000001a"
    name_prefix            = "nodejs-ecs-tasks-sg-"
    owner_id               = "010575877879"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "nodejs-ecs-tasks-sg-demo-alb-82a5a8b2"
    }
    tags_all               = {
        "Name" = "nodejs-ecs-tasks-sg-demo-alb-82a5a8b2"
    }
    vpc_id                 = "vpc-057f028812bd7c22f"
}

# module.alb.random_id.target_group_suffix:
resource "random_id" "target_group_suffix" {
    b64_std     = "x+Y="
    b64_url     = "x-Y"
    byte_length = 2
    dec         = "51174"
    hex         = "c7e6"
    id          = "x-Y"
    keepers     = {
        "name_prefix" = "demo-alb-82a5a8b2"
        "port"        = "80"
        "vpc_id"      = "vpc-057f028812bd7c22f"
    }
}


# module.backend.aws_dynamodb_table.terraform_locks:
resource "aws_dynamodb_table" "terraform_locks" {
    arn                         = "arn:aws:dynamodb:us-east-1:010575877879:table/demo-dev-locks"
    billing_mode                = "PAY_PER_REQUEST"
    deletion_protection_enabled = false
    hash_key                    = "LockID"
    id                          = "demo-dev-locks"
    name                        = "demo-dev-locks"
    read_capacity               = 0
    stream_arn                  = [90mnull[0m[0m
    stream_enabled              = false
    stream_label                = [90mnull[0m[0m
    stream_view_type            = [90mnull[0m[0m
    table_class                 = "STANDARD"
    tags                        = {
        "Name" = "demo-dev-locks"
    }
    tags_all                    = {
        "Name" = "demo-dev-locks"
    }
    write_capacity              = 0

    attribute {
        name = "LockID"
        type = "S"
    }

    point_in_time_recovery {
        enabled = false
    }

    ttl {
        attribute_name = [90mnull[0m[0m
        enabled        = false
    }
}

# module.backend.aws_s3_bucket.terraform_state:
resource "aws_s3_bucket" "terraform_state" {
    acceleration_status         = [90mnull[0m[0m
    arn                         = "arn:aws:s3:::dev-tfstate-0e982c82f3f4acdb"
    bucket                      = "dev-tfstate-0e982c82f3f4acdb"
    bucket_domain_name          = "dev-tfstate-0e982c82f3f4acdb.s3.amazonaws.com"
    bucket_prefix               = [90mnull[0m[0m
    bucket_regional_domain_name = "dev-tfstate-0e982c82f3f4acdb.s3.us-east-1.amazonaws.com"
    force_destroy               = true
    hosted_zone_id              = "Z3AQBSTGFYJSTF"
    id                          = "dev-tfstate-0e982c82f3f4acdb"
    object_lock_enabled         = false
    policy                      = [90mnull[0m[0m
    region                      = "us-east-1"
    request_payer               = "BucketOwner"
    tags                        = {
        "Environment" = "dev"
        "Project"     = "demo"
    }
    tags_all                    = {
        "Environment" = "dev"
        "Project"     = "demo"
    }

    grant {
        id          = "6af84428aeefa37ab06dd2ffd0b954bcabbb2bd55c4d76095ba4a6850a752c98"
        permissions = [
            "FULL_CONTROL",
        ]
        type        = "CanonicalUser"
        uri         = [90mnull[0m[0m
    }

    server_side_encryption_configuration {
        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                kms_master_key_id = [90mnull[0m[0m
                sse_algorithm     = "AES256"
            }
        }
    }

    versioning {
        enabled    = false
        mfa_delete = false
    }
}

# module.backend.aws_s3_bucket_lifecycle_configuration.terraform_state:
resource "aws_s3_bucket_lifecycle_configuration" "terraform_state" {
    bucket                                 = "dev-tfstate-0e982c82f3f4acdb"
    expected_bucket_owner                  = [90mnull[0m[0m
    id                                     = "dev-tfstate-0e982c82f3f4acdb"
    transition_default_minimum_object_size = "all_storage_classes_128K"

    rule {
        id     = "cleanup_old_versions"
        prefix = [90mnull[0m[0m
        status = "Enabled"

        abort_incomplete_multipart_upload {
            days_after_initiation = 7
        }

        expiration {
            date                         = [90mnull[0m[0m
            days                         = 0
            expired_object_delete_marker = true
        }

        filter {
            object_size_greater_than = [90mnull[0m[0m
            object_size_less_than    = [90mnull[0m[0m
            prefix                   = [90mnull[0m[0m
        }

        noncurrent_version_expiration {
            newer_noncurrent_versions = [90mnull[0m[0m
            noncurrent_days           = 1
        }
    }
}

# module.backend.aws_s3_bucket_versioning.terraform_state:
resource "aws_s3_bucket_versioning" "terraform_state" {
    bucket                = "dev-tfstate-0e982c82f3f4acdb"
    expected_bucket_owner = [90mnull[0m[0m
    id                    = "dev-tfstate-0e982c82f3f4acdb"

    versioning_configuration {
        mfa_delete = [90mnull[0m[0m
        status     = "Enabled"
    }
}

# module.backend.random_id.unique:
resource "random_id" "unique" {
    b64_std     = "DpgsgvP0rNs="
    b64_url     = "DpgsgvP0rNs"
    byte_length = 8
    dec         = "1051639453941279963"
    hex         = "0e982c82f3f4acdb"
    id          = "DpgsgvP0rNs"
}


# module.ecs_asg.data.aws_autoscaling_group.ecs:
data "aws_autoscaling_group" "ecs" {
    arn                                   = "arn:aws:autoscaling:us-east-1:010575877879:autoScalingGroup:36a1cbb3-2bd0-4321-9b38-634c1b622516:autoScalingGroupName/demo-asg-82a5a8b2-asg"
    availability_zones                    = [
        "us-east-1a",
    ]
    default_cooldown                      = 300
    desired_capacity                      = 1
    desired_capacity_type                 = [90mnull[0m[0m
    enabled_metrics                       = []
    health_check_grace_period             = 10
    health_check_type                     = "EC2"
    id                                    = "demo-asg-82a5a8b2-asg"
    instance_maintenance_policy           = []
    launch_configuration                  = [90mnull[0m[0m
    launch_template                       = [
        {
            id      = "lt-00f73589f228b6466"
            name    = "launch_template"
            version = "$Latest"
        },
    ]
    load_balancers                        = []
    max_instance_lifetime                 = 0
    max_size                              = 2
    min_size                              = 1
    mixed_instances_policy                = []
    name                                  = "demo-asg-82a5a8b2-asg"
    new_instances_protected_from_scale_in = true
    placement_group                       = [90mnull[0m[0m
    predicted_capacity                    = 0
    service_linked_role_arn               = "arn:aws:iam::010575877879:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
    status                                = [90mnull[0m[0m
    suspended_processes                   = []
    tag                                   = [
        {
            key                 = "AmazonECSManaged"
            propagate_at_launch = true
            value               = "true"
        },
        {
            key                 = "Name"
            propagate_at_launch = true
            value               = "demo-ecs-instance-82a5a8b2"
        },
        {
            key                 = "Purpose"
            propagate_at_launch = true
            value               = "ECS"
        },
        {
            key                 = "Zone"
            propagate_at_launch = true
            value               = "us-east-1a"
        },
    ]
    target_group_arns                     = []
    termination_policies                  = [
        "Default",
    ]
    traffic_source                        = []
    vpc_zone_identifier                   = "subnet-0b2b0edf12a8178c6"
    warm_pool                             = []
    warm_pool_size                        = 0
}

# module.ecs_asg.data.aws_autoscaling_group.lb:
data "aws_autoscaling_group" "lb" {
    arn                                   = "arn:aws:autoscaling:us-east-1:010575877879:autoScalingGroup:34b66c7b-61af-484e-9c7b-78c2a391dd35:autoScalingGroupName/demo-asg-82a5a8b2-asg-lb"
    availability_zones                    = [
        "us-east-1b",
    ]
    default_cooldown                      = 300
    desired_capacity                      = 1
    desired_capacity_type                 = [90mnull[0m[0m
    enabled_metrics                       = []
    health_check_grace_period             = 10
    health_check_type                     = "EC2"
    id                                    = "demo-asg-82a5a8b2-asg-lb"
    instance_maintenance_policy           = []
    launch_configuration                  = [90mnull[0m[0m
    launch_template                       = [
        {
            id      = "lt-00f73589f228b6466"
            name    = "launch_template"
            version = "$Latest"
        },
    ]
    load_balancers                        = []
    max_instance_lifetime                 = 0
    max_size                              = 2
    min_size                              = 1
    mixed_instances_policy                = []
    name                                  = "demo-asg-82a5a8b2-asg-lb"
    new_instances_protected_from_scale_in = false
    placement_group                       = [90mnull[0m[0m
    predicted_capacity                    = 0
    service_linked_role_arn               = "arn:aws:iam::010575877879:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
    status                                = [90mnull[0m[0m
    suspended_processes                   = []
    tag                                   = [
        {
            key                 = "AmazonECSManaged"
            propagate_at_launch = true
            value               = "false"
        },
        {
            key                 = "Name"
            propagate_at_launch = true
            value               = "demo-ecs-instance-82a5a8b2-lb"
        },
        {
            key                 = "Purpose"
            propagate_at_launch = true
            value               = "LoadBalancer"
        },
        {
            key                 = "Zone"
            propagate_at_launch = true
            value               = "us-east-1b"
        },
    ]
    target_group_arns                     = []
    termination_policies                  = [
        "Default",
    ]
    traffic_source                        = []
    vpc_zone_identifier                   = "subnet-0da891b8774e4876e"
    warm_pool                             = []
    warm_pool_size                        = 0
}

# module.ecs_asg.data.aws_instances.ecs:
data "aws_instances" "ecs" {
    id             = "us-east-1"
    ids            = [
        "i-09efae67b0acd89a1",
    ]
    ipv6_addresses = []
    private_ips    = [
        "10.0.2.161",
    ]
    public_ips     = []

    filter {
        name   = "tag:aws:autoscaling:groupName"
        values = [
            "demo-asg-82a5a8b2-asg",
        ]
    }
}

# module.ecs_asg.data.aws_instances.lb:
data "aws_instances" "lb" {
    id             = "us-east-1"
    ids            = [
        "i-0ec28dc8780545662",
    ]
    ipv6_addresses = []
    private_ips    = [
        "10.0.3.142",
    ]
    public_ips     = []

    filter {
        name   = "tag:aws:autoscaling:groupName"
        values = [
            "demo-asg-82a5a8b2-asg-lb",
        ]
    }
}

# module.ecs_asg.aws_autoscaling_group.ecs:
resource "aws_autoscaling_group" "ecs" {
    arn                              = "arn:aws:autoscaling:us-east-1:010575877879:autoScalingGroup:36a1cbb3-2bd0-4321-9b38-634c1b622516:autoScalingGroupName/demo-asg-82a5a8b2-asg"
    availability_zones               = [
        "us-east-1a",
    ]
    capacity_rebalance               = true
    context                          = [90mnull[0m[0m
    default_cooldown                 = 300
    default_instance_warmup          = 0
    desired_capacity                 = 1
    desired_capacity_type            = [90mnull[0m[0m
    force_delete                     = false
    force_delete_warm_pool           = false
    health_check_grace_period        = 10
    health_check_type                = "EC2"
    id                               = "demo-asg-82a5a8b2-asg"
    ignore_failed_scaling_activities = false
    launch_configuration             = [90mnull[0m[0m
    load_balancers                   = []
    max_instance_lifetime            = 0
    max_size                         = 2
    metrics_granularity              = "1Minute"
    min_size                         = 1
    name                             = "demo-asg-82a5a8b2-asg"
    name_prefix                      = [90mnull[0m[0m
    placement_group                  = [90mnull[0m[0m
    predicted_capacity               = 0
    protect_from_scale_in            = true
    service_linked_role_arn          = "arn:aws:iam::010575877879:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
    target_group_arns                = []
    vpc_zone_identifier              = [
        "subnet-0b2b0edf12a8178c6",
    ]
    wait_for_capacity_timeout        = "10m"
    warm_pool_size                   = 0

    initial_lifecycle_hook {
        default_result          = "CONTINUE"
        heartbeat_timeout       = 300
        lifecycle_transition    = "autoscaling:EC2_INSTANCE_TERMINATING"
        name                    = "terminate_hook"
        notification_metadata   = [90mnull[0m[0m
        notification_target_arn = [90mnull[0m[0m
        role_arn                = [90mnull[0m[0m
    }

    instance_refresh {
        strategy = "Rolling"

        preferences {
            auto_rollback                = false
            checkpoint_delay             = [90mnull[0m[0m
            instance_warmup              = "300"
            max_healthy_percentage       = 100
            min_healthy_percentage       = 50
            scale_in_protected_instances = "Ignore"
            skip_matching                = false
            standby_instances            = "Ignore"
        }
    }

    launch_template {
        id      = "lt-00f73589f228b6466"
        name    = "launch_template"
        version = "$Latest"
    }

    tag {
        key                 = "AmazonECSManaged"
        propagate_at_launch = true
        value               = "true"
    }
    tag {
        key                 = "Name"
        propagate_at_launch = true
        value               = "demo-ecs-instance-82a5a8b2"
    }
    tag {
        key                 = "Purpose"
        propagate_at_launch = true
        value               = "ECS"
    }
    tag {
        key                 = "Zone"
        propagate_at_launch = true
        value               = "us-east-1a"
    }
}

# module.ecs_asg.aws_autoscaling_group.lb:
resource "aws_autoscaling_group" "lb" {
    arn                              = "arn:aws:autoscaling:us-east-1:010575877879:autoScalingGroup:34b66c7b-61af-484e-9c7b-78c2a391dd35:autoScalingGroupName/demo-asg-82a5a8b2-asg-lb"
    availability_zones               = [
        "us-east-1b",
    ]
    capacity_rebalance               = true
    context                          = [90mnull[0m[0m
    default_cooldown                 = 300
    default_instance_warmup          = 0
    desired_capacity                 = 1
    desired_capacity_type            = [90mnull[0m[0m
    force_delete                     = false
    force_delete_warm_pool           = false
    health_check_grace_period        = 10
    health_check_type                = "EC2"
    id                               = "demo-asg-82a5a8b2-asg-lb"
    ignore_failed_scaling_activities = false
    launch_configuration             = [90mnull[0m[0m
    load_balancers                   = []
    max_instance_lifetime            = 0
    max_size                         = 2
    metrics_granularity              = "1Minute"
    min_size                         = 1
    name                             = "demo-asg-82a5a8b2-asg-lb"
    name_prefix                      = [90mnull[0m[0m
    placement_group                  = [90mnull[0m[0m
    predicted_capacity               = 0
    protect_from_scale_in            = false
    service_linked_role_arn          = "arn:aws:iam::010575877879:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
    target_group_arns                = []
    vpc_zone_identifier              = [
        "subnet-0da891b8774e4876e",
    ]
    wait_for_capacity_timeout        = "10m"
    warm_pool_size                   = 0

    initial_lifecycle_hook {
        default_result          = "CONTINUE"
        heartbeat_timeout       = 300
        lifecycle_transition    = "autoscaling:EC2_INSTANCE_TERMINATING"
        name                    = "terminate_hook"
        notification_metadata   = [90mnull[0m[0m
        notification_target_arn = [90mnull[0m[0m
        role_arn                = [90mnull[0m[0m
    }

    instance_refresh {
        strategy = "Rolling"

        preferences {
            auto_rollback                = false
            checkpoint_delay             = [90mnull[0m[0m
            instance_warmup              = "300"
            max_healthy_percentage       = 100
            min_healthy_percentage       = 50
            scale_in_protected_instances = "Ignore"
            skip_matching                = false
            standby_instances            = "Ignore"
        }
    }

    launch_template {
        id      = "lt-00f73589f228b6466"
        name    = "launch_template"
        version = "$Latest"
    }

    tag {
        key                 = "AmazonECSManaged"
        propagate_at_launch = true
        value               = "false"
    }
    tag {
        key                 = "Name"
        propagate_at_launch = true
        value               = "demo-ecs-instance-82a5a8b2-lb"
    }
    tag {
        key                 = "Purpose"
        propagate_at_launch = true
        value               = "LoadBalancer"
    }
    tag {
        key                 = "Zone"
        propagate_at_launch = true
        value               = "us-east-1b"
    }
}


# module.ecs_capacity_provider.aws_ecs_capacity_provider.main:
resource "aws_ecs_capacity_provider" "main" {
    arn      = "arn:aws:ecs:us-east-1:010575877879:capacity-provider/demo-capacity-provider-82a5a8b2"
    id       = "arn:aws:ecs:us-east-1:010575877879:capacity-provider/demo-capacity-provider-82a5a8b2"
    name     = "demo-capacity-provider-82a5a8b2"
    tags_all = {}

    auto_scaling_group_provider {
        auto_scaling_group_arn         = "arn:aws:autoscaling:us-east-1:010575877879:autoScalingGroup:36a1cbb3-2bd0-4321-9b38-634c1b622516:autoScalingGroupName/demo-asg-82a5a8b2-asg"
        managed_draining               = "ENABLED"
        managed_termination_protection = "DISABLED"

        managed_scaling {
            instance_warmup_period    = 0
            maximum_scaling_step_size = 1
            minimum_scaling_step_size = 1
            status                    = "ENABLED"
            target_capacity           = 100
        }
    }
}

# module.ecs_capacity_provider.aws_ecs_cluster_capacity_providers.main:
resource "aws_ecs_cluster_capacity_providers" "main" {
    capacity_providers = [
        "demo-capacity-provider-82a5a8b2",
    ]
    cluster_name       = "demo-cluster-82a5a8b2"
    id                 = "demo-cluster-82a5a8b2"

    default_capacity_provider_strategy {
        base              = 1
        capacity_provider = "demo-capacity-provider-82a5a8b2"
        weight            = 100
    }
}


# module.ecs_cluster.aws_ecs_cluster.main:
resource "aws_ecs_cluster" "main" {
    arn      = "arn:aws:ecs:us-east-1:010575877879:cluster/demo-cluster-82a5a8b2"
    id       = "arn:aws:ecs:us-east-1:010575877879:cluster/demo-cluster-82a5a8b2"
    name     = "demo-cluster-82a5a8b2"
    tags_all = {}

    setting {
        name  = "containerInsights"
        value = "disabled"
    }
}


# module.ecs_launch_template.data.aws_region.current:
data "aws_region" "current" {
    description = "US East (N. Virginia)"
    endpoint    = "ec2.us-east-1.amazonaws.com"
    id          = "us-east-1"
    name        = "us-east-1"
}

# module.ecs_launch_template.aws_cloudwatch_log_group.user_data_logs:
resource "aws_cloudwatch_log_group" "user_data_logs" {
    arn               = "arn:aws:logs:us-east-1:010575877879:log-group:/var/log/user-data-logs"
    id                = "/var/log/user-data-logs"
    kms_key_id        = [90mnull[0m[0m
    log_group_class   = "STANDARD"
    name              = "/var/log/user-data-logs"
    name_prefix       = [90mnull[0m[0m
    retention_in_days = 1
    skip_destroy      = false
    tags_all          = {}
}

# module.ecs_launch_template.aws_launch_template.ecs_ec2:
resource "aws_launch_template" "ecs_ec2" {
    arn                                  = "arn:aws:ec2:us-east-1:010575877879:launch-template/lt-00f73589f228b6466"
    default_version                      = 1
    description                          = [90mnull[0m[0m
    disable_api_stop                     = false
    disable_api_termination              = false
    ebs_optimized                        = [90mnull[0m[0m
    id                                   = "lt-00f73589f228b6466"
    image_id                             = "ami-0448a709165fd89ff"
    instance_initiated_shutdown_behavior = [90mnull[0m[0m
    instance_type                        = "t2.micro"
    kernel_id                            = [90mnull[0m[0m
    key_name                             = "ecs-instance-key-82a5a8b2"
    latest_version                       = 1
    name                                 = "launch_template"
    name_prefix                          = [90mnull[0m[0m
    ram_disk_id                          = [90mnull[0m[0m
    tags_all                             = {}
    user_data                            = "IyEvYmluL2Jhc2gKc2V0IC1lCgpMT0dGSUxFPSIvdmFyL2xvZy9zc20tc2V0dXAubG9nIgp0b3VjaCAkTE9HRklMRQoKbG9nKCkgewogICAgZWNobyAiJChkYXRlICcrJVktJW0tJWQgJUg6JU06JVMnKSAtICQxIiB8IHRlZSAtYSAkTE9HRklMRQp9CgojIFdhaXQgZm9yIHN5c3RlbSBpbml0aWFsaXphdGlvbgpzbGVlcCAxNQoKIyBDb25maWd1cmUgRUNTIEFnZW50CmNhdCA+IC9ldGMvZWNzL2Vjcy5jb25maWcgPDwgJ0VDU0NPTkZJRycKRUNTX0NMVVNURVI9ZGVtby1jbHVzdGVyLTgyYTVhOGIyCkVDU19FTkdJTkVfQVVUSF9UWVBFPWRvY2tlcgpFQ1NfTE9HTEVWRUw9ZGVidWcKRUNTX1dBUk1fUE9PTFNfQ0hFQ0s9dHJ1ZQpFQ1NfQ09OVEFJTkVSX01FVEFEQVRBX1VSSV9WRVJTSU9OPXY0CkVDU19ET0NLRVJfQVBJX1ZFUlNJT049MS40NApFQ1NfRU5BQkxFX1RBU0tfTUVUQURBVEE9dHJ1ZQpFQ1NfQVZBSUxBQkxFX0xPR0dJTkdfRFJJVkVSUz1bImpzb24tZmlsZSIsImF3c2xvZ3MiXQpFQ1NfRU5BQkxFX01BTkFHRURfVEFHUz10cnVlCkVDU19FTkFCTEVfVEFHX1BST1BBR0FUSU9OPXRydWUKRUNTX0VOQUJMRV9DT05UQUlORVJfTUVUQURBVEE9dHJ1ZQpFQ1NfQ09OVEFJTkVSX01FVEFEQVRBX1VSST0vdjMvCkVDU19BV1NWUENfQkxPQ0tfSU1EUz1mYWxzZQpFQ1NfRU5BQkxFX1RBU0tfSUFNX1JPTEU9dHJ1ZQpFQ1NfRU5BQkxFX1RBU0tfRU5JPXRydWUKRUNTX0VOQUJMRV9TUE9UX0lOU1RBTkNFX0RSQUlOSU5HPXRydWUKRUNTX0VOQUJMRV9IRUFMVEhfTU9OSVRPUklORz10cnVlCkVDU19DT05UQUlORVJfTUVUQURBVEFfUE9MTF9JTlRFUlZBTD02MApFQ1NfU1RBVElDX0NPTlRBSU5FUl9QT1JUX01BUFBJTkc9dHJ1ZQpFQ1NfQ09OVEFJTkVSX0lOU1RBTkNFX1RBR1M9eyJlbnZpcm9ubWVudCI6InByb2QiLCJtYW5hZ2VkLWJ5IjoidGVycmFmb3JtIn0KRUNTX0VOQUJMRV9DT05UQUlORVJfSU5TVEFOQ0VfVEFHR0lORz10cnVlCkVDU19JTlNUQU5DRV9MT0NBTF9NRVRBREFUQV9QUk9WSURFUj10cnVlCkVDU0NPTkZJRwoKCiMgSW5zdGFsbCByZXF1aXJlZCBwYWNrYWdlcwpzdWRvIHl1bSBpbnN0YWxsIC15IHVuemlwCmN1cmwgImh0dHBzOi8vYXdzY2xpLmFtYXpvbmF3cy5jb20vYXdzY2xpLWV4ZS1saW51eC14ODZfNjQuemlwIiAtbyAiYXdzY2xpdjIuemlwIgp1bnppcCBhd3NjbGl2Mi56aXAKc3VkbyAuL2F3cy9pbnN0YWxsCnl1bSBpbnN0YWxsIC15IGFtYXpvbi1zc20tYWdlbnQgbmMganEKCiMgU3RhcnQgYW5kIGVuYWJsZSBTU00gQWdlbnQKc3lzdGVtY3RsIHN0YXJ0IGFtYXpvbi1zc20tYWdlbnQKc3lzdGVtY3RsIGVuYWJsZSBhbWF6b24tc3NtLWFnZW50CgojIENvbmZpZ3VyZSBTZXNzaW9uIE1hbmFnZXIgbG9nZ2luZwpta2RpciAtcCAvZXRjL2FtYXpvbi9zc20KY2F0ID4gL2V0Yy9hbWF6b24vc3NtL3NlZWxvZy54bWwgPDwgJ1NTTUNPTkZJRycKPHNlZWxvZyB0eXBlPSJhZGFwdGl2ZSIgbWluaW50ZXJ2YWw9IjIwMDAwMDAiIG1heGludGVydmFsPSIxMDAwMDAwMDAiIGNyaXRtc2djb3VudD0iNTAwIj4KICAgIDxleGNlcHRpb25zPgogICAgICAgIDxleGNlcHRpb24gZmlsZXBhdHRlcm49InRlc3QqIiBtaW5sZXZlbD0id2FybiIvPgogICAgPC9leGNlcHRpb25zPgogICAgPG91dHB1dHMgZm9ybWF0aWQ9ImZtdGluZm8iPgogICAgICAgIDxjb25zb2xlIGZvcm1hdGlkPSJmbXRpbmZvIi8+CiAgICAgICAgPHJvbGxpbmdmaWxlIHR5cGU9InNpemUiIGZpbGVuYW1lPSIvdmFyL2xvZy9hbWF6b24vc3NtL2FtYXpvbi1zc20tYWdlbnQubG9nIiBtYXhzaXplPSIzMDAwMDAwMCIgbWF4cm9sbHM9IjUiLz4KICAgIDwvb3V0cHV0cz4KICAgIDxmb3JtYXRzPgogICAgICAgIDxmb3JtYXQgaWQ9ImZtdGluZm8iIGZvcm1hdD0iJURhdGUgJVRpbWUgJUxFVkVMIFslRnVuY1Nob3J0IEAgJUZpbGUuJUxpbmVdICVNc2clbiIvPgogICAgPC9mb3JtYXRzPgo8L3NlZWxvZz4KU1NNQ09ORklHCgojIENvbmZpZ3VyZSBzaGVsbCBwcm9maWxlIGZvciBTZXNzaW9uIE1hbmFnZXIKY2F0ID4gL2V0Yy9hbWF6b24vc3NtL3NoZWxsLWNvbmZpZy5qc29uIDw8ICdTSEVMTENPTkZJRycKewogICAgImxpbnV4IjogewogICAgICAgICJjb21tYW5kcyI6IFsiYmFzaCJdLAogICAgICAgICJydW5Bc0VsZXZhdGVkIjogdHJ1ZSwKICAgICAgICAicnVuQXNFbmFibGVkIjogdHJ1ZSwKICAgICAgICAic2hlbGxQcm9maWxlIjogewogICAgICAgICAgICAibGludXgiOiAic291cmNlIH4vLmJhc2hyYyIKICAgICAgICB9CiAgICB9Cn0KU0hFTExDT05GSUcKCiMgUmVzdGFydCBTU00gQWdlbnQgdG8gYXBwbHkgY2hhbmdlcwpzeXN0ZW1jdGwgcmVzdGFydCBhbWF6b24tc3NtLWFnZW50CgojIFdhaXQgZm9yIFNTTSBBZ2VudCB0byBzdGFiaWxpemUKc2xlZXAgMzAKCnN1ZG8geXVtIGluc3RhbGwgbmFubyAteQoKIyBWZXJpZnkgU1NNIEFnZW50IHN0YXR1cwppZiBzeXN0ZW1jdGwgaXMtYWN0aXZlIGFtYXpvbi1zc20tYWdlbnQgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICBsb2cgIlNTTSBBZ2VudCBpcyBydW5uaW5nIHN1Y2Nlc3NmdWxseSIKZWxzZQogICAgbG9nICJFcnJvcjogU1NNIEFnZW50IGZhaWxlZCB0byBzdGFydCIKICAgIGV4aXQgMQpmaQoKbG9nICJTZXR1cCBjb21wbGV0ZS4gVmVyaWZ5IGZ1bGwgY29uZmlndXJhdGlvbiBpbiAkTE9HRklMRSIK"

    iam_instance_profile {
        arn  = "arn:aws:iam::010575877879:instance-profile/ecs-instance-profile-2024123114030451320000000a"
        name = [90mnull[0m[0m
    }

    metadata_options {
        http_endpoint               = "enabled"
        http_protocol_ipv6          = [90mnull[0m[0m
        http_put_response_hop_limit = 2
        http_tokens                 = "optional"
        instance_metadata_tags      = [90mnull[0m[0m
    }

    network_interfaces {
        associate_carrier_ip_address = [90mnull[0m[0m
        associate_public_ip_address  = "false"
        delete_on_termination        = [90mnull[0m[0m
        description                  = [90mnull[0m[0m
        device_index                 = 0
        interface_type               = [90mnull[0m[0m
        ipv4_address_count           = 0
        ipv4_prefix_count            = 0
        ipv6_address_count           = 0
        ipv6_prefix_count            = 0
        network_card_index           = 0
        network_interface_id         = [90mnull[0m[0m
        primary_ipv6                 = [90mnull[0m[0m
        private_ip_address           = [90mnull[0m[0m
        security_groups              = [
            "sg-030921498d950b576",
        ]
        subnet_id                    = "subnet-0b2b0edf12a8178c6"
    }

    tag_specifications {
        resource_type = "instance"
        tags          = {
            "ECSCluster" = "demo-cluster-82a5a8b2"
            "Name"       = "ecs-instance-profile-2024123114030451320000000a-instance"
        }
    }
}


# module.ecs_node_role.data.aws_iam_policy_document.ecs_node_doc:
data "aws_iam_policy_document" "ecs_node_doc" {
    id            = "1895348101"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = [
                            "ecs-tasks.amazonaws.com",
                            "ec2.amazonaws.com",
                        ]
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = [
                            "ecs-tasks.amazonaws.com",
                            "ec2.amazonaws.com",
                        ]
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "sts:AssumeRole",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = []
        sid           = [90mnull[0m[0m

        principals {
            identifiers = [
                "ec2.amazonaws.com",
                "ecs-tasks.amazonaws.com",
            ]
            type        = "Service"
        }
    }
}

# module.ecs_node_role.data.aws_iam_policy_document.ecs_node_permissions:
data "aws_iam_policy_document" "ecs_node_permissions" {
    id            = "937695128"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ssmmessages:OpenDataChannel",
                        "ssmmessages:OpenControlChannel",
                        "ssmmessages:CreateDataChannel",
                        "ssmmessages:CreateControlChannel",
                        "ssm:UpdateServiceSetting",
                        "ssm:UpdateManagedInstanceRole",
                        "ssm:UpdateInstanceInformation",
                        "ssm:UpdateInstanceAssociationStatus",
                        "ssm:UpdateAssociation",
                        "ssm:TerminateSession",
                        "ssm:StartSession",
                        "ssm:SendCommand",
                        "ssm:ResumeSession",
                        "ssm:ResetServiceSetting",
                        "ssm:RemoveTagsFromResource",
                        "ssm:PutParameter",
                        "ssm:ListTagsForResource",
                        "ssm:ListInstanceAssociations",
                        "ssm:ListDocuments",
                        "ssm:ListDocumentVersions",
                        "ssm:ListCommands",
                        "ssm:ListCommandInvocations",
                        "ssm:ListAssociations",
                        "ssm:LabelParameterVersion",
                        "ssm:GetServiceSetting",
                        "ssm:GetPatchBaseline",
                        "ssm:GetParametersByPath",
                        "ssm:GetParameters",
                        "ssm:GetParameterHistory",
                        "ssm:GetParameter",
                        "ssm:GetDocument",
                        "ssm:GetDefaultPatchBaseline",
                        "ssm:GetConnectionStatus",
                        "ssm:GetCommandInvocation",
                        "ssm:GetActivations",
                        "ssm:DescribeSessions",
                        "ssm:DescribePatchBaselines",
                        "ssm:DescribeParameters",
                        "ssm:DescribeInstanceProperties",
                        "ssm:DescribeInstancePatches",
                        "ssm:DescribeInstancePatchStates",
                        "ssm:DescribeInstanceInformation",
                        "ssm:DescribeInstanceAssociations",
                        "ssm:DescribeDocumentParameters",
                        "ssm:DescribeDocument",
                        "ssm:DeleteParameters",
                        "ssm:DeleteParameter",
                        "ssm:DeleteAssociation",
                        "ssm:DeleteActivation",
                        "ssm:CreateAssociation",
                        "ssm:CreateActivation",
                        "ssm:CancelCommand",
                        "ssm:AddTagsToResource",
                        "servicediscovery:DiscoverInstances",
                        "secretsmanager:GetSecretValue",
                        "secretsmanager:DescribeSecret",
                        "logs:PutRetentionPolicy",
                        "logs:PutLogEvents",
                        "logs:DescribeLogStreams",
                        "logs:DescribeLogGroups",
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "kms:GenerateDataKey",
                        "kms:Decrypt",
                        "iam:PassRole",
                        "iam:ListRolePolicies",
                        "iam:ListAttachedRolePolicies",
                        "iam:GetRole",
                        "ecs:UpdateService",
                        "ecs:UpdateContainerInstancesState",
                        "ecs:UpdateContainerAgent",
                        "ecs:Submit*",
                        "ecs:StopTask",
                        "ecs:StartTelemetrySession",
                        "ecs:StartTask",
                        "ecs:RunTask",
                        "ecs:RegisterTaskDefinition",
                        "ecs:RegisterContainerInstance",
                        "ecs:Poll",
                        "ecs:ListTasks",
                        "ecs:ListTaskDefinitions",
                        "ecs:ListContainerInstances",
                        "ecs:ListClusters",
                        "ecs:DiscoverPollEndpoint",
                        "ecs:DescribeTasks",
                        "ecs:DescribeTaskDefinition",
                        "ecs:DescribeServices",
                        "ecs:DescribeContainerInstances",
                        "ecs:DescribeClusters",
                        "ecs:DeregisterContainerInstance",
                        "ecs:DeleteCluster",
                        "ecs:CreateCluster",
                        "ecr:UploadLayerPart",
                        "ecr:PutImage",
                        "ecr:ListImages",
                        "ecr:InitiateLayerUpload",
                        "ecr:GetRepositoryPolicy",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:GetAuthorizationToken",
                        "ecr:DescribeRepositories",
                        "ecr:DescribeImages",
                        "ecr:CompleteLayerUpload",
                        "ecr:BatchGetImage",
                        "ecr:BatchCheckLayerAvailability",
                        "ec2:ReleaseAddress",
                        "ec2:ModifyNetworkInterfaceAttribute",
                        "ec2:DisassociateAddress",
                        "ec2:DetachVolume",
                        "ec2:DetachNetworkInterface",
                        "ec2:DescribeVolumes",
                        "ec2:DescribeTags",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:DescribeInstances",
                        "ec2:DescribeAddresses",
                        "ec2:DeleteNetworkInterface",
                        "ec2:CreateTags",
                        "ec2:CreateNetworkInterface",
                        "ec2:AttachVolume",
                        "ec2:AttachNetworkInterface",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ssmmessages:OpenDataChannel",
                        "ssmmessages:OpenControlChannel",
                        "ssmmessages:CreateDataChannel",
                        "ssmmessages:CreateControlChannel",
                        "ssm:UpdateServiceSetting",
                        "ssm:UpdateManagedInstanceRole",
                        "ssm:UpdateInstanceInformation",
                        "ssm:UpdateInstanceAssociationStatus",
                        "ssm:UpdateAssociation",
                        "ssm:TerminateSession",
                        "ssm:StartSession",
                        "ssm:SendCommand",
                        "ssm:ResumeSession",
                        "ssm:ResetServiceSetting",
                        "ssm:RemoveTagsFromResource",
                        "ssm:PutParameter",
                        "ssm:ListTagsForResource",
                        "ssm:ListInstanceAssociations",
                        "ssm:ListDocuments",
                        "ssm:ListDocumentVersions",
                        "ssm:ListCommands",
                        "ssm:ListCommandInvocations",
                        "ssm:ListAssociations",
                        "ssm:LabelParameterVersion",
                        "ssm:GetServiceSetting",
                        "ssm:GetPatchBaseline",
                        "ssm:GetParametersByPath",
                        "ssm:GetParameters",
                        "ssm:GetParameterHistory",
                        "ssm:GetParameter",
                        "ssm:GetDocument",
                        "ssm:GetDefaultPatchBaseline",
                        "ssm:GetConnectionStatus",
                        "ssm:GetCommandInvocation",
                        "ssm:GetActivations",
                        "ssm:DescribeSessions",
                        "ssm:DescribePatchBaselines",
                        "ssm:DescribeParameters",
                        "ssm:DescribeInstanceProperties",
                        "ssm:DescribeInstancePatches",
                        "ssm:DescribeInstancePatchStates",
                        "ssm:DescribeInstanceInformation",
                        "ssm:DescribeInstanceAssociations",
                        "ssm:DescribeDocumentParameters",
                        "ssm:DescribeDocument",
                        "ssm:DeleteParameters",
                        "ssm:DeleteParameter",
                        "ssm:DeleteAssociation",
                        "ssm:DeleteActivation",
                        "ssm:CreateAssociation",
                        "ssm:CreateActivation",
                        "ssm:CancelCommand",
                        "ssm:AddTagsToResource",
                        "servicediscovery:DiscoverInstances",
                        "secretsmanager:GetSecretValue",
                        "secretsmanager:DescribeSecret",
                        "logs:PutRetentionPolicy",
                        "logs:PutLogEvents",
                        "logs:DescribeLogStreams",
                        "logs:DescribeLogGroups",
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "kms:GenerateDataKey",
                        "kms:Decrypt",
                        "iam:PassRole",
                        "iam:ListRolePolicies",
                        "iam:ListAttachedRolePolicies",
                        "iam:GetRole",
                        "ecs:UpdateService",
                        "ecs:UpdateContainerInstancesState",
                        "ecs:UpdateContainerAgent",
                        "ecs:Submit*",
                        "ecs:StopTask",
                        "ecs:StartTelemetrySession",
                        "ecs:StartTask",
                        "ecs:RunTask",
                        "ecs:RegisterTaskDefinition",
                        "ecs:RegisterContainerInstance",
                        "ecs:Poll",
                        "ecs:ListTasks",
                        "ecs:ListTaskDefinitions",
                        "ecs:ListContainerInstances",
                        "ecs:ListClusters",
                        "ecs:DiscoverPollEndpoint",
                        "ecs:DescribeTasks",
                        "ecs:DescribeTaskDefinition",
                        "ecs:DescribeServices",
                        "ecs:DescribeContainerInstances",
                        "ecs:DescribeClusters",
                        "ecs:DeregisterContainerInstance",
                        "ecs:DeleteCluster",
                        "ecs:CreateCluster",
                        "ecr:UploadLayerPart",
                        "ecr:PutImage",
                        "ecr:ListImages",
                        "ecr:InitiateLayerUpload",
                        "ecr:GetRepositoryPolicy",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:GetAuthorizationToken",
                        "ecr:DescribeRepositories",
                        "ecr:DescribeImages",
                        "ecr:CompleteLayerUpload",
                        "ecr:BatchGetImage",
                        "ecr:BatchCheckLayerAvailability",
                        "ec2:ReleaseAddress",
                        "ec2:ModifyNetworkInterfaceAttribute",
                        "ec2:DisassociateAddress",
                        "ec2:DetachVolume",
                        "ec2:DetachNetworkInterface",
                        "ec2:DescribeVolumes",
                        "ec2:DescribeTags",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:DescribeInstances",
                        "ec2:DescribeAddresses",
                        "ec2:DeleteNetworkInterface",
                        "ec2:CreateTags",
                        "ec2:CreateNetworkInterface",
                        "ec2:AttachVolume",
                        "ec2:AttachNetworkInterface",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "ec2:AttachNetworkInterface",
            "ec2:AttachVolume",
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeAddresses",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "ec2:DetachNetworkInterface",
            "ec2:DetachVolume",
            "ec2:DisassociateAddress",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ReleaseAddress",
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:CompleteLayerUpload",
            "ecr:DescribeImages",
            "ecr:DescribeRepositories",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "ecr:GetRepositoryPolicy",
            "ecr:InitiateLayerUpload",
            "ecr:ListImages",
            "ecr:PutImage",
            "ecr:UploadLayerPart",
            "ecs:CreateCluster",
            "ecs:DeleteCluster",
            "ecs:DeregisterContainerInstance",
            "ecs:DescribeClusters",
            "ecs:DescribeContainerInstances",
            "ecs:DescribeServices",
            "ecs:DescribeTaskDefinition",
            "ecs:DescribeTasks",
            "ecs:DiscoverPollEndpoint",
            "ecs:ListClusters",
            "ecs:ListContainerInstances",
            "ecs:ListTaskDefinitions",
            "ecs:ListTasks",
            "ecs:Poll",
            "ecs:RegisterContainerInstance",
            "ecs:RegisterTaskDefinition",
            "ecs:RunTask",
            "ecs:StartTask",
            "ecs:StartTelemetrySession",
            "ecs:StopTask",
            "ecs:Submit*",
            "ecs:UpdateContainerAgent",
            "ecs:UpdateContainerInstancesState",
            "ecs:UpdateService",
            "iam:GetRole",
            "iam:ListAttachedRolePolicies",
            "iam:ListRolePolicies",
            "iam:PassRole",
            "kms:Decrypt",
            "kms:GenerateDataKey",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "logs:PutRetentionPolicy",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "servicediscovery:DiscoverInstances",
            "ssm:AddTagsToResource",
            "ssm:CancelCommand",
            "ssm:CreateActivation",
            "ssm:CreateAssociation",
            "ssm:DeleteActivation",
            "ssm:DeleteAssociation",
            "ssm:DeleteParameter",
            "ssm:DeleteParameters",
            "ssm:DescribeDocument",
            "ssm:DescribeDocumentParameters",
            "ssm:DescribeInstanceAssociations",
            "ssm:DescribeInstanceInformation",
            "ssm:DescribeInstancePatchStates",
            "ssm:DescribeInstancePatches",
            "ssm:DescribeInstanceProperties",
            "ssm:DescribeParameters",
            "ssm:DescribePatchBaselines",
            "ssm:DescribeSessions",
            "ssm:GetActivations",
            "ssm:GetCommandInvocation",
            "ssm:GetConnectionStatus",
            "ssm:GetDefaultPatchBaseline",
            "ssm:GetDocument",
            "ssm:GetParameter",
            "ssm:GetParameterHistory",
            "ssm:GetParameters",
            "ssm:GetParametersByPath",
            "ssm:GetPatchBaseline",
            "ssm:GetServiceSetting",
            "ssm:LabelParameterVersion",
            "ssm:ListAssociations",
            "ssm:ListCommandInvocations",
            "ssm:ListCommands",
            "ssm:ListDocumentVersions",
            "ssm:ListDocuments",
            "ssm:ListInstanceAssociations",
            "ssm:ListTagsForResource",
            "ssm:PutParameter",
            "ssm:RemoveTagsFromResource",
            "ssm:ResetServiceSetting",
            "ssm:ResumeSession",
            "ssm:SendCommand",
            "ssm:StartSession",
            "ssm:TerminateSession",
            "ssm:UpdateAssociation",
            "ssm:UpdateInstanceAssociationStatus",
            "ssm:UpdateInstanceInformation",
            "ssm:UpdateManagedInstanceRole",
            "ssm:UpdateServiceSetting",
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = [90mnull[0m[0m
    }
}

# module.ecs_node_role.data.aws_iam_policy_document.ecs_node_role_policy:
data "aws_iam_policy_document" "ecs_node_role_policy" {
    id            = "2861722153"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ssm:UpdateInstanceInformation",
                        "ssm:TerminateSession",
                        "ssm:StartSession",
                        "ssm:ResumeSession",
                        "ssm:ListInstanceAssociations",
                        "ssm:DescribeInstanceProperties",
                        "ssm:DescribeDocumentParameters",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
                {
                    Action   = [
                        "ssmmessages:OpenDataChannel",
                        "ssmmessages:OpenControlChannel",
                        "ssmmessages:CreateDataChannel",
                        "ssmmessages:CreateControlChannel",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
                {
                    Action   = [
                        "ec2messages:SendReply",
                        "ec2messages:GetMessages",
                        "ec2messages:GetEndpoint",
                        "ec2messages:FailMessage",
                        "ec2messages:DeleteMessage",
                        "ec2messages:AcknowledgeMessage",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ssm:UpdateInstanceInformation",
                        "ssm:TerminateSession",
                        "ssm:StartSession",
                        "ssm:ResumeSession",
                        "ssm:ListInstanceAssociations",
                        "ssm:DescribeInstanceProperties",
                        "ssm:DescribeDocumentParameters",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
                {
                    Action   = [
                        "ssmmessages:OpenDataChannel",
                        "ssmmessages:OpenControlChannel",
                        "ssmmessages:CreateDataChannel",
                        "ssmmessages:CreateControlChannel",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
                {
                    Action   = [
                        "ec2messages:SendReply",
                        "ec2messages:GetMessages",
                        "ec2messages:GetEndpoint",
                        "ec2messages:FailMessage",
                        "ec2messages:DeleteMessage",
                        "ec2messages:AcknowledgeMessage",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "ssm:DescribeDocumentParameters",
            "ssm:DescribeInstanceProperties",
            "ssm:ListInstanceAssociations",
            "ssm:ResumeSession",
            "ssm:StartSession",
            "ssm:TerminateSession",
            "ssm:UpdateInstanceInformation",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = [90mnull[0m[0m
    }
    statement {
        actions       = [
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = [90mnull[0m[0m
    }
    statement {
        actions       = [
            "ec2messages:AcknowledgeMessage",
            "ec2messages:DeleteMessage",
            "ec2messages:FailMessage",
            "ec2messages:GetEndpoint",
            "ec2messages:GetMessages",
            "ec2messages:SendReply",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = [90mnull[0m[0m
    }
}

# module.ecs_node_role.data.aws_iam_policy_document.full_access:
data "aws_iam_policy_document" "full_access" {
    id            = "3847708362"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ssm:*",
                        "logs:*",
                        "iam:PassRole",
                        "iam:ListRolePolicies",
                        "iam:ListAttachedRolePolicies",
                        "iam:GetRole",
                        "ecs:*",
                        "ecr:*",
                        "ec2:*",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
                {
                    Action   = [
                        "ec2:ReleaseAddress",
                        "ec2:DescribeAddresses",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ssm:*",
                        "logs:*",
                        "iam:PassRole",
                        "iam:ListRolePolicies",
                        "iam:ListAttachedRolePolicies",
                        "iam:GetRole",
                        "ecs:*",
                        "ecr:*",
                        "ec2:*",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
                {
                    Action   = [
                        "ec2:ReleaseAddress",
                        "ec2:DescribeAddresses",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "ec2:*",
            "ecr:*",
            "ecs:*",
            "iam:GetRole",
            "iam:ListAttachedRolePolicies",
            "iam:ListRolePolicies",
            "iam:PassRole",
            "logs:*",
            "ssm:*",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = [90mnull[0m[0m
    }
    statement {
        actions       = [
            "ec2:DescribeAddresses",
            "ec2:ReleaseAddress",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = [90mnull[0m[0m
    }
}

# module.ecs_node_role.aws_iam_instance_profile.ecs_node:
resource "aws_iam_instance_profile" "ecs_node" {
    arn         = "arn:aws:iam::010575877879:instance-profile/ecs/instance/demo-ecs-node-profile-82a5a8b220241231140304471300000009"
    create_date = "2024-12-31T14:03:04Z"
    id          = "demo-ecs-node-profile-82a5a8b220241231140304471300000009"
    name        = "demo-ecs-node-profile-82a5a8b220241231140304471300000009"
    name_prefix = "demo-ecs-node-profile-82a5a8b2"
    path        = "/ecs/instance/"
    role        = "demo-ecs-node-role-82a5a8b220241231140302606300000001"
    tags_all    = {}
    unique_id   = "AIPAQE5S7C33YODDJJ72B"
}

# module.ecs_node_role.aws_iam_policy.ecs_combined_permissions:
resource "aws_iam_policy" "ecs_combined_permissions" {
    arn              = "arn:aws:iam::010575877879:policy/demo-ecs-node-role-82a5a8b2-comb20241231140302606300000002"
    attachment_count = 0
    description      = "Combined permissions for ECS node and execution roles"
    id               = "arn:aws:iam::010575877879:policy/demo-ecs-node-role-82a5a8b2-comb20241231140302606300000002"
    name             = "demo-ecs-node-role-82a5a8b2-comb20241231140302606300000002"
    name_prefix      = "demo-ecs-node-role-82a5a8b2-comb"
    path             = "/"
    policy           = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ssmmessages:OpenDataChannel",
                        "ssmmessages:OpenControlChannel",
                        "ssmmessages:CreateDataChannel",
                        "ssmmessages:CreateControlChannel",
                        "ssm:UpdateServiceSetting",
                        "ssm:UpdateManagedInstanceRole",
                        "ssm:UpdateInstanceInformation",
                        "ssm:UpdateInstanceAssociationStatus",
                        "ssm:UpdateAssociation",
                        "ssm:TerminateSession",
                        "ssm:StartSession",
                        "ssm:SendCommand",
                        "ssm:ResumeSession",
                        "ssm:ResetServiceSetting",
                        "ssm:RemoveTagsFromResource",
                        "ssm:PutParameter",
                        "ssm:ListTagsForResource",
                        "ssm:ListInstanceAssociations",
                        "ssm:ListDocuments",
                        "ssm:ListDocumentVersions",
                        "ssm:ListCommands",
                        "ssm:ListCommandInvocations",
                        "ssm:ListAssociations",
                        "ssm:LabelParameterVersion",
                        "ssm:GetServiceSetting",
                        "ssm:GetPatchBaseline",
                        "ssm:GetParametersByPath",
                        "ssm:GetParameters",
                        "ssm:GetParameterHistory",
                        "ssm:GetParameter",
                        "ssm:GetDocument",
                        "ssm:GetDefaultPatchBaseline",
                        "ssm:GetConnectionStatus",
                        "ssm:GetCommandInvocation",
                        "ssm:GetActivations",
                        "ssm:DescribeSessions",
                        "ssm:DescribePatchBaselines",
                        "ssm:DescribeParameters",
                        "ssm:DescribeInstanceProperties",
                        "ssm:DescribeInstancePatches",
                        "ssm:DescribeInstancePatchStates",
                        "ssm:DescribeInstanceInformation",
                        "ssm:DescribeInstanceAssociations",
                        "ssm:DescribeDocumentParameters",
                        "ssm:DescribeDocument",
                        "ssm:DeleteParameters",
                        "ssm:DeleteParameter",
                        "ssm:DeleteAssociation",
                        "ssm:DeleteActivation",
                        "ssm:CreateAssociation",
                        "ssm:CreateActivation",
                        "ssm:CancelCommand",
                        "ssm:AddTagsToResource",
                        "servicediscovery:DiscoverInstances",
                        "secretsmanager:GetSecretValue",
                        "secretsmanager:DescribeSecret",
                        "logs:PutRetentionPolicy",
                        "logs:PutLogEvents",
                        "logs:DescribeLogStreams",
                        "logs:DescribeLogGroups",
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "kms:GenerateDataKey",
                        "kms:Decrypt",
                        "iam:PassRole",
                        "iam:ListRolePolicies",
                        "iam:ListAttachedRolePolicies",
                        "iam:GetRole",
                        "ecs:UpdateService",
                        "ecs:UpdateContainerInstancesState",
                        "ecs:UpdateContainerAgent",
                        "ecs:Submit*",
                        "ecs:StopTask",
                        "ecs:StartTelemetrySession",
                        "ecs:StartTask",
                        "ecs:RunTask",
                        "ecs:RegisterTaskDefinition",
                        "ecs:RegisterContainerInstance",
                        "ecs:Poll",
                        "ecs:ListTasks",
                        "ecs:ListTaskDefinitions",
                        "ecs:ListContainerInstances",
                        "ecs:ListClusters",
                        "ecs:DiscoverPollEndpoint",
                        "ecs:DescribeTasks",
                        "ecs:DescribeTaskDefinition",
                        "ecs:DescribeServices",
                        "ecs:DescribeContainerInstances",
                        "ecs:DescribeClusters",
                        "ecs:DeregisterContainerInstance",
                        "ecs:DeleteCluster",
                        "ecs:CreateCluster",
                        "ecr:UploadLayerPart",
                        "ecr:PutImage",
                        "ecr:ListImages",
                        "ecr:InitiateLayerUpload",
                        "ecr:GetRepositoryPolicy",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:GetAuthorizationToken",
                        "ecr:DescribeRepositories",
                        "ecr:DescribeImages",
                        "ecr:CompleteLayerUpload",
                        "ecr:BatchGetImage",
                        "ecr:BatchCheckLayerAvailability",
                        "ec2:ReleaseAddress",
                        "ec2:ModifyNetworkInterfaceAttribute",
                        "ec2:DisassociateAddress",
                        "ec2:DetachVolume",
                        "ec2:DetachNetworkInterface",
                        "ec2:DescribeVolumes",
                        "ec2:DescribeTags",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:DescribeInstances",
                        "ec2:DescribeAddresses",
                        "ec2:DeleteNetworkInterface",
                        "ec2:CreateTags",
                        "ec2:CreateNetworkInterface",
                        "ec2:AttachVolume",
                        "ec2:AttachNetworkInterface",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    policy_id        = "ANPAQE5S7C33WJF5H5ZHY"
    tags_all         = {}
}

# module.ecs_node_role.aws_iam_policy.full_access:
resource "aws_iam_policy" "full_access" {
    arn              = "arn:aws:iam::010575877879:policy/demo-ecs-node-role-82a5a8b2-full20241231140303900100000007"
    attachment_count = 0
    description      = "Full access policy"
    id               = "arn:aws:iam::010575877879:policy/demo-ecs-node-role-82a5a8b2-full20241231140303900100000007"
    name             = "demo-ecs-node-role-82a5a8b2-full20241231140303900100000007"
    name_prefix      = "demo-ecs-node-role-82a5a8b2-full"
    path             = "/"
    policy           = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ssm:*",
                        "logs:*",
                        "iam:PassRole",
                        "iam:ListRolePolicies",
                        "iam:ListAttachedRolePolicies",
                        "iam:GetRole",
                        "ecs:*",
                        "ecr:*",
                        "ec2:*",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
                {
                    Action   = [
                        "ec2:ReleaseAddress",
                        "ec2:DescribeAddresses",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    policy_id        = "ANPAQE5S7C33UYWRISNE4"
    tags_all         = {}
}

# module.ecs_node_role.aws_iam_role.ecs_exec_role:
resource "aws_iam_role" "ecs_exec_role" {
    arn                   = "arn:aws:iam::010575877879:role/demo-ecs-node-role-82a5a8b2-exec20241231140302606400000003"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ecs-tasks.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2024-12-31T14:03:03Z"
    description           = [90mnull[0m[0m
    force_detach_policies = true
    id                    = "demo-ecs-node-role-82a5a8b2-exec20241231140302606400000003"
    managed_policy_arns   = []
    max_session_duration  = 3600
    name                  = "demo-ecs-node-role-82a5a8b2-exec20241231140302606400000003"
    name_prefix           = "demo-ecs-node-role-82a5a8b2-exec"
    path                  = "/"
    permissions_boundary  = [90mnull[0m[0m
    tags_all              = {}
    unique_id             = "AROAQE5S7C33VH7IMV727"
}

# module.ecs_node_role.aws_iam_role.ecs_node_role:
resource "aws_iam_role" "ecs_node_role" {
    arn                   = "arn:aws:iam::010575877879:role/demo-ecs-node-role-82a5a8b220241231140302606300000001"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = [
                            "ecs-tasks.amazonaws.com",
                            "ec2.amazonaws.com",
                        ]
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2024-12-31T14:03:03Z"
    description           = [90mnull[0m[0m
    force_detach_policies = false
    id                    = "demo-ecs-node-role-82a5a8b220241231140302606300000001"
    managed_policy_arns   = []
    max_session_duration  = 3600
    name                  = "demo-ecs-node-role-82a5a8b220241231140302606300000001"
    name_prefix           = "demo-ecs-node-role-82a5a8b2"
    path                  = "/"
    permissions_boundary  = [90mnull[0m[0m
    tags_all              = {}
    unique_id             = "AROAQE5S7C33ZIC3IBCTT"
}

# module.ecs_node_role.aws_iam_role_policy_attachment.ecs_cloudwatch_policy:
resource "aws_iam_role_policy_attachment" "ecs_cloudwatch_policy" {
    id         = "demo-ecs-node-role-82a5a8b220241231140302606300000001-20241231140304192800000008"
    policy_arn = "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
    role       = "demo-ecs-node-role-82a5a8b220241231140302606300000001"
}

# module.ecs_node_role.aws_iam_role_policy_attachment.ecs_exec_cloudwatch_policy:
resource "aws_iam_role_policy_attachment" "ecs_exec_cloudwatch_policy" {
    id         = "demo-ecs-node-role-82a5a8b2-exec20241231140302606400000003-20241231140305460600000011"
    policy_arn = "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
    role       = "demo-ecs-node-role-82a5a8b2-exec20241231140302606400000003"
}

# module.ecs_node_role.aws_iam_role_policy_attachment.ecs_exec_combined_permissions:
resource "aws_iam_role_policy_attachment" "ecs_exec_combined_permissions" {
    id         = "demo-ecs-node-role-82a5a8b2-exec20241231140302606400000003-2024123114030541710000000f"
    policy_arn = "arn:aws:iam::010575877879:policy/demo-ecs-node-role-82a5a8b2-comb20241231140302606300000002"
    role       = "demo-ecs-node-role-82a5a8b2-exec20241231140302606400000003"
}

# module.ecs_node_role.aws_iam_role_policy_attachment.ecs_exec_role_policy:
resource "aws_iam_role_policy_attachment" "ecs_exec_role_policy" {
    id         = "demo-ecs-node-role-82a5a8b2-exec20241231140302606400000003-20241231140305435500000010"
    policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
    role       = "demo-ecs-node-role-82a5a8b2-exec20241231140302606400000003"
}

# module.ecs_node_role.aws_iam_role_policy_attachment.ecs_node_combined_permissions:
resource "aws_iam_role_policy_attachment" "ecs_node_combined_permissions" {
    id         = "demo-ecs-node-role-82a5a8b220241231140302606300000001-2024123114030454520000000b"
    policy_arn = "arn:aws:iam::010575877879:policy/demo-ecs-node-role-82a5a8b2-comb20241231140302606300000002"
    role       = "demo-ecs-node-role-82a5a8b220241231140302606300000001"
}

# module.ecs_node_role.aws_iam_role_policy_attachment.ecs_node_role_policy:
resource "aws_iam_role_policy_attachment" "ecs_node_role_policy" {
    id         = "demo-ecs-node-role-82a5a8b220241231140302606300000001-2024123114030461000000000c"
    policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
    role       = "demo-ecs-node-role-82a5a8b220241231140302606300000001"
}

# module.ecs_node_role.aws_iam_role_policy_attachment.full_access_exec:
resource "aws_iam_role_policy_attachment" "full_access_exec" {
    id         = "demo-ecs-node-role-82a5a8b2-exec20241231140302606400000003-20241231140307068100000013"
    policy_arn = "arn:aws:iam::010575877879:policy/demo-ecs-node-role-82a5a8b2-full20241231140303900100000007"
    role       = "demo-ecs-node-role-82a5a8b2-exec20241231140302606400000003"
}

# module.ecs_node_role.aws_iam_role_policy_attachment.full_access_node:
resource "aws_iam_role_policy_attachment" "full_access_node" {
    id         = "demo-ecs-node-role-82a5a8b220241231140302606300000001-20241231140307288200000014"
    policy_arn = "arn:aws:iam::010575877879:policy/demo-ecs-node-role-82a5a8b2-full20241231140303900100000007"
    role       = "demo-ecs-node-role-82a5a8b220241231140302606300000001"
}


# module.ecs_node_sg.data.aws_vpc.selected:
data "aws_vpc" "selected" {
    arn                                  = "arn:aws:ec2:us-east-1:010575877879:vpc/vpc-057f028812bd7c22f"
    cidr_block                           = "10.0.0.0/16"
    cidr_block_associations              = [
        {
            association_id = "vpc-cidr-assoc-0d694bcf633d147fb"
            cidr_block     = "10.0.0.0/16"
            state          = "associated"
        },
    ]
    default                              = false
    dhcp_options_id                      = "dopt-06d2655013d8d60c3"
    enable_dns_hostnames                 = true
    enable_dns_support                   = true
    enable_network_address_usage_metrics = false
    id                                   = "vpc-057f028812bd7c22f"
    instance_tenancy                     = "default"
    ipv6_association_id                  = [90mnull[0m[0m
    ipv6_cidr_block                      = [90mnull[0m[0m
    main_route_table_id                  = "rtb-0a282fd4841dc236f"
    owner_id                             = "010575877879"
    tags                                 = {
        "Name" = "demo-vpc-82a5a8b2"
    }
}

# module.ecs_node_sg.aws_security_group.alb_sg:
resource "aws_security_group" "alb_sg" {
    arn                    = "arn:aws:ec2:us-east-1:010575877879:security-group/sg-07d73787935e7fe56"
    description            = "Security group for ALB in public subnet"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = "Allow all outbound traffic"
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-07d73787935e7fe56"
    ingress                = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = "Allow HTTP inbound"
            from_port        = 80
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 80
        },
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = "Allow HTTPS inbound"
            from_port        = 443
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 443
        },
    ]
    name                   = "demo-ecs-sg-82a5a8b2-alb20241231140316637500000018"
    name_prefix            = "demo-ecs-sg-82a5a8b2-alb"
    owner_id               = "010575877879"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "demo-ecs-sg-82a5a8b2-alb-sg"
    }
    tags_all               = {
        "Name" = "demo-ecs-sg-82a5a8b2-alb-sg"
    }
    vpc_id                 = "vpc-057f028812bd7c22f"
}

# module.ecs_node_sg.aws_security_group.ecs_node_sg:
resource "aws_security_group" "ecs_node_sg" {
    arn                    = "arn:aws:ec2:us-east-1:010575877879:security-group/sg-030921498d950b576"
    description            = "Security group for ECS nodes in private subnet"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = "Allow all outbound traffic via NAT Gateway"
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-030921498d950b576"
    ingress                = [
        {
            cidr_blocks      = [
                "10.0.0.0/16",
            ]
            description      = "Allow all internal VPC traffic"
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 65535
        },
        {
            cidr_blocks      = [
                "10.0.0.0/16",
            ]
            description      = "Allow ephemeral ports for ECS tasks"
            from_port        = 32768
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 65535
        },
        {
            cidr_blocks      = []
            description      = "Allow all inbound traffic from ALB"
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-03227ddbd51f7f07d",
            ]
            self             = false
            to_port          = 65535
        },
    ]
    name                   = "demo-ecs-sg-82a5a8b22024123114032267980000001c"
    name_prefix            = "demo-ecs-sg-82a5a8b2"
    owner_id               = "010575877879"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "demo-ecs-sg-82a5a8b2-ecs-private-sg"
    }
    tags_all               = {
        "Name" = "demo-ecs-sg-82a5a8b2-ecs-private-sg"
    }
    vpc_id                 = "vpc-057f028812bd7c22f"
}

# module.ecs_node_sg.aws_security_group_rule.container_communication:
resource "aws_security_group_rule" "container_communication" {
    description              = "Allow container-to-container communication"
    from_port                = 0
    id                       = "sgrule-552665057"
    protocol                 = "tcp"
    security_group_id        = "sg-030921498d950b576"
    security_group_rule_id   = "sgr-0a829a52324f350ae"
    self                     = false
    source_security_group_id = "sg-030921498d950b576"
    to_port                  = 65535
    type                     = "ingress"
}


# module.ecs_service.aws_ecs_service.app:
resource "aws_ecs_service" "app" {
    availability_zone_rebalancing      = "DISABLED"
    cluster                            = "arn:aws:ecs:us-east-1:010575877879:cluster/demo-cluster-82a5a8b2"
    deployment_maximum_percent         = 200
    deployment_minimum_healthy_percent = 100
    desired_count                      = 1
    enable_ecs_managed_tags            = false
    enable_execute_command             = false
    force_new_deployment               = true
    health_check_grace_period_seconds  = 150
    iam_role                           = "/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
    id                                 = "arn:aws:ecs:us-east-1:010575877879:service/demo-cluster-82a5a8b2/demo-ecs-Nservice-82a5a8b2"
    launch_type                        = [90mnull[0m[0m
    name                               = "demo-ecs-Nservice-82a5a8b2"
    platform_version                   = [90mnull[0m[0m
    propagate_tags                     = "NONE"
    scheduling_strategy                = "REPLICA"
    tags_all                           = {}
    task_definition                    = "arn:aws:ecs:us-east-1:010575877879:task-definition/nginx-task-82a5a8b2:1"
    triggers                           = {}
    wait_for_steady_state              = true

    capacity_provider_strategy {
        base              = 1
        capacity_provider = "demo-capacity-provider-82a5a8b2"
        weight            = 100
    }

    deployment_circuit_breaker {
        enable   = true
        rollback = true
    }

    deployment_controller {
        type = "ECS"
    }

    load_balancer {
        container_name   = "my-container-nginx"
        container_port   = 80
        elb_name         = [90mnull[0m[0m
        target_group_arn = "arn:aws:elasticloadbalancing:us-east-1:010575877879:targetgroup/tg-ecs-demo-alb-82a5a8b2-c7e6/9e8ddbe44bcdc2fe"
    }

    ordered_placement_strategy {
        field = "attribute:ecs.availability-zone"
        type  = "spread"
    }
    ordered_placement_strategy {
        field = "instanceId"
        type  = "spread"
    }

    timeouts {
        create = "30m"
        delete = "30m"
        update = "30m"
    }
}

# module.ecs_service.aws_security_group_rule.allow_alb_to_ecs:
resource "aws_security_group_rule" "allow_alb_to_ecs" {
    description              = "Allow ALB to ECS tasks"
    from_port                = 80
    id                       = "sgrule-2431670894"
    protocol                 = "tcp"
    security_group_id        = "sg-030921498d950b576"
    security_group_rule_id   = "sgr-060e3c4fde5c4b809"
    self                     = false
    source_security_group_id = "sg-0f8571b0fc3221e81"
    to_port                  = 80
    type                     = "ingress"
}


# module.ecs_service_auto_scaling.aws_appautoscaling_policy.ecs_target_cpu:
resource "aws_appautoscaling_policy" "ecs_target_cpu" {
    alarm_arns         = [
        "arn:aws:cloudwatch:us-east-1:010575877879:alarm:TargetTracking-service/demo-cluster-82a5a8b2/demo-ecs-Nservice-82a5a8b2-AlarmHigh-4db797e3-19db-4503-9a4e-0c59bbb6e124",
        "arn:aws:cloudwatch:us-east-1:010575877879:alarm:TargetTracking-service/demo-cluster-82a5a8b2/demo-ecs-Nservice-82a5a8b2-AlarmLow-eddfbfbe-f60d-47f4-8ed3-e6d5ef6a5f63",
    ]
    arn                = "arn:aws:autoscaling:us-east-1:010575877879:scalingPolicy:7af576e4-2ee6-4862-a7dc-a9a65717b24c:resource/ecs/service/demo-cluster-82a5a8b2/demo-ecs-Nservice-82a5a8b2:policyName/application-scaling-policy-cpu"
    id                 = "application-scaling-policy-cpu"
    name               = "application-scaling-policy-cpu"
    policy_type        = "TargetTrackingScaling"
    resource_id        = "service/demo-cluster-82a5a8b2/demo-ecs-Nservice-82a5a8b2"
    scalable_dimension = "ecs:service:DesiredCount"
    service_namespace  = "ecs"

    target_tracking_scaling_policy_configuration {
        disable_scale_in   = false
        scale_in_cooldown  = 300
        scale_out_cooldown = 300
        target_value       = 80

        predefined_metric_specification {
            predefined_metric_type = "ECSServiceAverageCPUUtilization"
            resource_label         = [90mnull[0m[0m
        }
    }
}

# module.ecs_service_auto_scaling.aws_appautoscaling_policy.ecs_target_memory:
resource "aws_appautoscaling_policy" "ecs_target_memory" {
    alarm_arns         = [
        "arn:aws:cloudwatch:us-east-1:010575877879:alarm:TargetTracking-service/demo-cluster-82a5a8b2/demo-ecs-Nservice-82a5a8b2-AlarmHigh-b809dbd1-383a-4538-80dd-8d6f132b3c98",
        "arn:aws:cloudwatch:us-east-1:010575877879:alarm:TargetTracking-service/demo-cluster-82a5a8b2/demo-ecs-Nservice-82a5a8b2-AlarmLow-ad9e775c-05cd-4c4c-9204-4fa0cf55115b",
    ]
    arn                = "arn:aws:autoscaling:us-east-1:010575877879:scalingPolicy:7af576e4-2ee6-4862-a7dc-a9a65717b24c:resource/ecs/service/demo-cluster-82a5a8b2/demo-ecs-Nservice-82a5a8b2:policyName/application-scaling-policy-memory"
    id                 = "application-scaling-policy-memory"
    name               = "application-scaling-policy-memory"
    policy_type        = "TargetTrackingScaling"
    resource_id        = "service/demo-cluster-82a5a8b2/demo-ecs-Nservice-82a5a8b2"
    scalable_dimension = "ecs:service:DesiredCount"
    service_namespace  = "ecs"

    target_tracking_scaling_policy_configuration {
        disable_scale_in   = false
        scale_in_cooldown  = 300
        scale_out_cooldown = 300
        target_value       = 80

        predefined_metric_specification {
            predefined_metric_type = "ECSServiceAverageMemoryUtilization"
            resource_label         = [90mnull[0m[0m
        }
    }
}

# module.ecs_service_auto_scaling.aws_appautoscaling_target.ecs_target:
resource "aws_appautoscaling_target" "ecs_target" {
    arn                = "arn:aws:application-autoscaling:us-east-1:010575877879:scalable-target/0ec57af576e42ee64862a7dca9a65717b24c"
    id                 = "service/demo-cluster-82a5a8b2/demo-ecs-Nservice-82a5a8b2"
    max_capacity       = 5
    min_capacity       = 1
    resource_id        = "service/demo-cluster-82a5a8b2/demo-ecs-Nservice-82a5a8b2"
    role_arn           = "arn:aws:iam::010575877879:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
    scalable_dimension = "ecs:service:DesiredCount"
    service_namespace  = "ecs"
    tags_all           = {}

    suspended_state {
        dynamic_scaling_in_suspended  = false
        dynamic_scaling_out_suspended = false
        scheduled_scaling_suspended   = false
    }
}


# module.ecs_service_nodes.aws_ecs_service.nodejs:
resource "aws_ecs_service" "nodejs" {
    availability_zone_rebalancing      = "DISABLED"
    cluster                            = "demo-cluster-82a5a8b2"
    deployment_maximum_percent         = 200
    deployment_minimum_healthy_percent = 100
    desired_count                      = 2
    enable_ecs_managed_tags            = true
    enable_execute_command             = true
    force_new_deployment               = true
    health_check_grace_period_seconds  = 120
    iam_role                           = "/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
    id                                 = "arn:aws:ecs:us-east-1:010575877879:service/demo-cluster-82a5a8b2/ECS-s-node"
    launch_type                        = "EC2"
    name                               = "ECS-s-node"
    platform_version                   = [90mnull[0m[0m
    propagate_tags                     = "SERVICE"
    scheduling_strategy                = "REPLICA"
    tags_all                           = {}
    task_definition                    = "arn:aws:ecs:us-east-1:010575877879:task-definition/node-task-82a5a8b2:1"
    triggers                           = {}
    wait_for_steady_state              = false

    deployment_circuit_breaker {
        enable   = true
        rollback = true
    }

    deployment_controller {
        type = "ECS"
    }

    load_balancer {
        container_name   = "my-container-nodejs"
        container_port   = 3000
        elb_name         = [90mnull[0m[0m
        target_group_arn = "arn:aws:elasticloadbalancing:us-east-1:010575877879:targetgroup/tg-nodejs-demo-alb-82a5a8b2-c7e6/142d4d7ea8f3b578"
    }

    ordered_placement_strategy {
        field = "cpu"
        type  = "binpack"
    }

    placement_constraints {
        expression = "attribute:ecs.availability-zone == us-east-1a"
        type       = "memberOf"
    }

    service_registries {
        container_name = "my-container-nodejs"
        container_port = 3000
        port           = 0
        registry_arn   = "arn:aws:servicediscovery:us-east-1:010575877879:service/srv-oxyfeqhhgo3lr2sw"
    }

    timeouts {
        create = "30m"
        delete = "30m"
        update = "30m"
    }
}

# module.ecs_service_nodes.aws_security_group_rule.allow_alb_to_nodejs:
resource "aws_security_group_rule" "allow_alb_to_nodejs" {
    description              = "Allow ALB to Node.js ECS tasks"
    from_port                = 3000
    id                       = "sgrule-2549325686"
    protocol                 = "tcp"
    security_group_id        = "sg-030921498d950b576"
    security_group_rule_id   = "sgr-07409da2aaf3deb72"
    self                     = false
    source_security_group_id = "sg-09876fbb4ba7178f6"
    to_port                  = 3000
    type                     = "ingress"
}


# module.ecs_task_definition.aws_cloudwatch_log_group.ecs_logs:
resource "aws_cloudwatch_log_group" "ecs_logs" {
    arn               = "arn:aws:logs:us-east-1:010575877879:log-group:/ecs/nginx-task-82a5a8b2"
    id                = "/ecs/nginx-task-82a5a8b2"
    kms_key_id        = [90mnull[0m[0m
    log_group_class   = "STANDARD"
    name              = "/ecs/nginx-task-82a5a8b2"
    name_prefix       = [90mnull[0m[0m
    retention_in_days = 30
    skip_destroy      = false
    tags_all          = {}
}

# module.ecs_task_definition.aws_ecs_task_definition.app:
resource "aws_ecs_task_definition" "app" {
    arn                      = "arn:aws:ecs:us-east-1:010575877879:task-definition/nginx-task-82a5a8b2:1"
    arn_without_revision     = "arn:aws:ecs:us-east-1:010575877879:task-definition/nginx-task-82a5a8b2"
    container_definitions    = jsonencode(
        [
            {
                cpu              = 256
                environment      = [
                    {
                        name  = "NODEJS_SERVICE_NAME"
                        value = "ECS-s-node"
                    },
                    {
                        name  = "TASK_INDEX"
                        value = "4"
                    },
                ]
                essential        = true
                healthCheck      = {
                    command     = [
                        "CMD-SHELL",
                        "test -r /var/run/docker.sock && curl -f http://localhost/health || exit 1",
                    ]
                    interval    = 30
                    retries     = 3
                    startPeriod = 60
                    timeout     = 5
                }
                image            = "awsemc1980/my_custom_nginx_image1:v7"
                logConfiguration = {
                    logDriver = "awslogs"
                    options   = {
                        awslogs-group         = "/ecs/nginx-task-82a5a8b2"
                        awslogs-region        = "us-east-1"
                        awslogs-stream-prefix = "ecs"
                    }
                }
                memory           = 256
                mountPoints      = [
                    {
                        containerPath = "/var/run/docker.sock"
                        readOnly      = true
                        sourceVolume  = "docker-sock"
                    },
                ]
                name             = "my-container-nginx"
                portMappings     = [
                    {
                        containerPort = 80
                        hostPort      = 80
                        protocol      = "tcp"
                    },
                ]
                systemControls   = []
                volumesFrom      = []
            },
        ]
    )
    cpu                      = "256"
    execution_role_arn       = "arn:aws:iam::010575877879:role/demo-ecs-task-role-82a5a8b220241231140302608100000004"
    family                   = "nginx-task-82a5a8b2"
    id                       = "nginx-task-82a5a8b2"
    ipc_mode                 = [90mnull[0m[0m
    memory                   = "256"
    network_mode             = "bridge"
    pid_mode                 = [90mnull[0m[0m
    requires_compatibilities = [
        "EC2",
    ]
    revision                 = 1
    skip_destroy             = false
    tags_all                 = {}
    task_role_arn            = "arn:aws:iam::010575877879:role/demo-ecs-exec-role-82a5a8b220241231140303827900000006"
    track_latest             = false

    volume {
        configure_at_launch = false
        host_path           = "/var/run/docker.sock"
        name                = "docker-sock"
    }
}

# module.ecs_task_definition.aws_security_group.ecs_tasks:
resource "aws_security_group" "ecs_tasks" {
    arn                    = "arn:aws:ec2:us-east-1:010575877879:security-group/sg-017d7b00e4862e962"
    description            = "Security group for ECS tasks with Nginx"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = [90mnull[0m[0m
            from_port        = 0
            ipv6_cidr_blocks = [
                "::/0",
            ]
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-017d7b00e4862e962"
    ingress                = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = "Application Port"
            from_port        = 3000
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 3000
        },
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = "HTTP from VPC"
            from_port        = 80
            ipv6_cidr_blocks = [
                "::/0",
            ]
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 80
        },
    ]
    name                   = "ecs-tasks-sg"
    name_prefix            = [90mnull[0m[0m
    owner_id               = "010575877879"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "ecs-tasks-security-group"
    }
    tags_all               = {
        "Name" = "ecs-tasks-security-group"
    }
    vpc_id                 = "vpc-057f028812bd7c22f"
}


# module.ecs_task_definition_node.data.aws_region.current:
data "aws_region" "current" {
    description = "US East (N. Virginia)"
    endpoint    = "ec2.us-east-1.amazonaws.com"
    id          = "us-east-1"
    name        = "us-east-1"
}

# module.ecs_task_definition_node.aws_ecs_task_definition.app:
resource "aws_ecs_task_definition" "app" {
    arn                      = "arn:aws:ecs:us-east-1:010575877879:task-definition/node-task-82a5a8b2:1"
    arn_without_revision     = "arn:aws:ecs:us-east-1:010575877879:task-definition/node-task-82a5a8b2"
    container_definitions    = jsonencode(
        [
            {
                cpu              = 128
                dockerLabels     = {
                    "app.service.identity"  = "my-container-nodejs-#{container:DockerId}"
                    container-name          = "my-container-nodejs"
                    "custom.container-name" = "#{aws:TaskARN}"
                    service                 = "nodejs"
                    task-definition-family  = "node-task-82a5a8b2"
                }
                environment      = [
                    {
                        name  = "AWS_REGION"
                        value = "us-east-1"
                    },
                    {
                        name  = "CONTAINER_ID"
                        value = "#{container:DockerId}"
                    },
                    {
                        name  = "DISCOVERY_INTERVAL"
                        value = "30"
                    },
                    {
                        name  = "ECS_CLUSTER"
                        value = "demo-cluster-82a5a8b2"
                    },
                    {
                        name  = "ECS_CONTAINER_METADATA_URI"
                        value = "#{ECS_CONTAINER_METADATA_URI_V4}"
                    },
                    {
                        name  = "ECS_CONTAINER_NAME"
                        value = "my-container-nodejs"
                    },
                    {
                        name  = "ECS_SERVICE_NAME"
                        value = "ECS-s-node"
                    },
                    {
                        name  = "PORT"
                        value = "3000"
                    },
                    {
                        name  = "SERVICE_DISCOVERY_NAME"
                        value = "ECS-discovery.ns-ejamhy7gif2zfjpa"
                    },
                    {
                        name  = "SERVICE_IDENTITY"
                        value = "my-container-nodejs"
                    },
                    {
                        name  = "TASK_ID"
                        value = "#{aws:TaskARN}"
                    },
                    {
                        name  = "TASK_INSTANCE"
                        value = "#{container:DockerId}"
                    },
                ]
                essential        = true
                healthCheck      = {
                    command     = [
                        "CMD-SHELL",
                        "wget -q --spider http://localhost:3000/health || exit 1",
                    ]
                    interval    = 30
                    retries     = 3
                    startPeriod = 60
                    timeout     = 5
                }
                image            = "awsemc1980/custom-node-service:v2"
                logConfiguration = {
                    logDriver = "awslogs"
                    options   = {
                        awslogs-create-group  = "true"
                        awslogs-group         = "log_group-82a5a8b2"
                        awslogs-region        = "us-east-1"
                        awslogs-stream-prefix = "ecs"
                        max-buffer-size       = "4m"
                        mode                  = "non-blocking"
                    }
                }
                memory           = 128
                mountPoints      = [
                    {
                        containerPath = "/var/log/nginx"
                        readOnly      = false
                        sourceVolume  = "nginx-logs"
                    },
                ]
                name             = "my-container-nodejs"
                portMappings     = [
                    {
                        containerPort = 3000
                        hostPort      = 0
                        protocol      = "tcp"
                    },
                ]
                systemControls   = []
                volumesFrom      = []
            },
        ]
    )
    cpu                      = "128"
    execution_role_arn       = "arn:aws:iam::010575877879:role/demo-ecs-task-role-82a5a8b220241231140302608100000004"
    family                   = "node-task-82a5a8b2"
    id                       = "node-task-82a5a8b2"
    ipc_mode                 = [90mnull[0m[0m
    memory                   = "128"
    network_mode             = "bridge"
    pid_mode                 = [90mnull[0m[0m
    requires_compatibilities = [
        "EC2",
    ]
    revision                 = 1
    skip_destroy             = false
    tags                     = {
        "Environment" = "nodejs-app"
        "Managed-by"  = "terraform"
        "Service"     = "my-container-nodejs"
    }
    tags_all                 = {
        "Environment" = "nodejs-app"
        "Managed-by"  = "terraform"
        "Service"     = "my-container-nodejs"
    }
    task_role_arn            = "arn:aws:iam::010575877879:role/demo-ecs-exec-role-82a5a8b220241231140303827900000006"
    track_latest             = false

    volume {
        configure_at_launch = false
        host_path           = "/var/log/ecs/nginx"
        name                = "nginx-logs"
    }
}


# module.ecs_task_role.aws_iam_instance_profile.ecs_instance_profile:
resource "aws_iam_instance_profile" "ecs_instance_profile" {
    arn         = "arn:aws:iam::010575877879:instance-profile/ecs-instance-profile-2024123114030451320000000a"
    create_date = "2024-12-31T14:03:04Z"
    id          = "ecs-instance-profile-2024123114030451320000000a"
    name        = "ecs-instance-profile-2024123114030451320000000a"
    name_prefix = "ecs-instance-profile-"
    path        = "/"
    role        = "ecs-instance-role-20241231140302609500000005"
    tags_all    = {}
    unique_id   = "AIPAQE5S7C33UAT2TEBZN"
}

# module.ecs_task_role.aws_iam_policy.custom_ssm_policy:
resource "aws_iam_policy" "custom_ssm_policy" {
    arn              = "arn:aws:iam::010575877879:policy/CustomSSMInstancePolicy"
    attachment_count = 0
    description      = [90mnull[0m[0m
    id               = "arn:aws:iam::010575877879:policy/CustomSSMInstancePolicy"
    name             = "CustomSSMInstancePolicy"
    name_prefix      = [90mnull[0m[0m
    path             = "/"
    policy           = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ssm:GetParameter",
                        "ssm:GetParameters",
                        "ssm:GetParametersByPath",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    policy_id        = "ANPAQE5S7C333FTJUK2KW"
    tags_all         = {}
}

# module.ecs_task_role.aws_iam_role.ecs_exec_role:
resource "aws_iam_role" "ecs_exec_role" {
    arn                   = "arn:aws:iam::010575877879:role/demo-ecs-exec-role-82a5a8b220241231140303827900000006"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ecs-tasks.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2024-12-31T14:03:04Z"
    description           = [90mnull[0m[0m
    force_detach_policies = false
    id                    = "demo-ecs-exec-role-82a5a8b220241231140303827900000006"
    managed_policy_arns   = []
    max_session_duration  = 3600
    name                  = "demo-ecs-exec-role-82a5a8b220241231140303827900000006"
    name_prefix           = "demo-ecs-exec-role-82a5a8b2"
    path                  = "/"
    permissions_boundary  = [90mnull[0m[0m
    tags_all              = {}
    unique_id             = "AROAQE5S7C336MNZTWSFB"
}

# module.ecs_task_role.aws_iam_role.ecs_instance_role:
resource "aws_iam_role" "ecs_instance_role" {
    arn                   = "arn:aws:iam::010575877879:role/ecs-instance-role-20241231140302609500000005"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ec2.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2024-12-31T14:03:03Z"
    description           = [90mnull[0m[0m
    force_detach_policies = false
    id                    = "ecs-instance-role-20241231140302609500000005"
    managed_policy_arns   = []
    max_session_duration  = 3600
    name                  = "ecs-instance-role-20241231140302609500000005"
    name_prefix           = "ecs-instance-role-"
    path                  = "/"
    permissions_boundary  = [90mnull[0m[0m
    tags_all              = {}
    unique_id             = "AROAQE5S7C33WWQRYUX3G"
}

# module.ecs_task_role.aws_iam_role.ecs_task_role:
resource "aws_iam_role" "ecs_task_role" {
    arn                   = "arn:aws:iam::010575877879:role/demo-ecs-task-role-82a5a8b220241231140302608100000004"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ecs-tasks.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2024-12-31T14:03:03Z"
    description           = [90mnull[0m[0m
    force_detach_policies = false
    id                    = "demo-ecs-task-role-82a5a8b220241231140302608100000004"
    managed_policy_arns   = []
    max_session_duration  = 3600
    name                  = "demo-ecs-task-role-82a5a8b220241231140302608100000004"
    name_prefix           = "demo-ecs-task-role-82a5a8b2"
    path                  = "/"
    permissions_boundary  = [90mnull[0m[0m
    tags_all              = {}
    unique_id             = "AROAQE5S7C33S63AXPC2U"
}

# module.ecs_task_role.aws_iam_role_policy.container_discovery_permissions:
resource "aws_iam_role_policy" "container_discovery_permissions" {
    id          = "demo-ecs-task-role-82a5a8b220241231140302608100000004:container-discovery-permissions"
    name        = "container-discovery-permissions"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ecs:DiscoverPollEndpoint",
                        "ecs:Poll",
                        "ecs:RegisterContainerInstance",
                        "ecs:DeregisterContainerInstance",
                        "ecs:SubmitContainerStateChange",
                        "ecs:SubmitTaskStateChange",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-task-role-82a5a8b220241231140302608100000004"
}

# module.ecs_task_role.aws_iam_role_policy.ec2_metadata_policy:
resource "aws_iam_role_policy" "ec2_metadata_policy" {
    id          = "ecs-instance-role-20241231140302609500000005:ec2-metadata-policy"
    name        = "ec2-metadata-policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ec2:DescribeInstances",
                        "ec2:DescribeTags",
                        "ec2:DescribeInstanceTypes",
                        "ec2:DescribeInstanceStatus",
                        "ecs:ListAttributes",
                        "ecs:GetAttributes",
                        "ecs:ListTaskDefinitionFamilies",
                        "ecs:ListTagsForResource",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "ecs-instance-role-20241231140302609500000005"
}

# module.ecs_task_role.aws_iam_role_policy.ecr_policy:
resource "aws_iam_role_policy" "ecr_policy" {
    id          = "demo-ecs-exec-role-82a5a8b220241231140303827900000006:ecr_policy"
    name        = "ecr_policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ecr:GetAuthorizationToken",
                        "ecr:BatchCheckLayerAvailability",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:BatchGetImage",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-exec-role-82a5a8b220241231140303827900000006"
}

# module.ecs_task_role.aws_iam_role_policy.ecs_exec_additional_permissions:
resource "aws_iam_role_policy" "ecs_exec_additional_permissions" {
    id          = "demo-ecs-exec-role-82a5a8b220241231140303827900000006:ecs-exec-additional-permissions"
    name        = "ecs-exec-additional-permissions"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ecs:ListTasks",
                        "ecs:DescribeTasks",
                        "ecs:ListServices",
                        "ecs:DescribeServices",
                        "ecs:ListClusters",
                        "ecs:DescribeClusters",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-exec-role-82a5a8b220241231140303827900000006"
}

# module.ecs_task_role.aws_iam_role_policy.ecs_exec_discovery_permissions:
resource "aws_iam_role_policy" "ecs_exec_discovery_permissions" {
    id          = "demo-ecs-exec-role-82a5a8b220241231140303827900000006:ecs-exec-discovery-permissions"
    name        = "ecs-exec-discovery-permissions"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ecs:DescribeContainerInstances",
                        "ecs:ListTasks",
                        "ecs:DescribeTasks",
                        "ec2:DescribeInstances",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-exec-role-82a5a8b220241231140303827900000006"
}

# module.ecs_task_role.aws_iam_role_policy.ecs_exec_tags_policy:
resource "aws_iam_role_policy" "ecs_exec_tags_policy" {
    id          = "demo-ecs-exec-role-82a5a8b220241231140303827900000006:ecs-exec-tags-policy"
    name        = "ecs-exec-tags-policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ec2:CreateTags",
                        "ec2:DeleteTags",
                        "ecs:TagResource",
                        "ecs:UntagResource",
                        "ecs:ListTagsForResource",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-exec-role-82a5a8b220241231140303827900000006"
}

# module.ecs_task_role.aws_iam_role_policy.ecs_instance_additional_permissions:
resource "aws_iam_role_policy" "ecs_instance_additional_permissions" {
    id          = "ecs-instance-role-20241231140302609500000005:ecs-instance-additional-permissions"
    name        = "ecs-instance-additional-permissions"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ecs:ListTasks",
                        "ecs:DescribeTasks",
                        "ecs:ListServices",
                        "ecs:DescribeServices",
                        "ecs:ListClusters",
                        "ecs:DescribeClusters",
                        "ecs:DescribeContainerInstances",
                        "ec2:DescribeInstances",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "ecs-instance-role-20241231140302609500000005"
}

# module.ecs_task_role.aws_iam_role_policy.ecs_instance_docker_policy:
resource "aws_iam_role_policy" "ecs_instance_docker_policy" {
    id          = "ecs-instance-role-20241231140302609500000005:ecs_instance_docker_policy"
    name        = "ecs_instance_docker_policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ecr:GetAuthorizationToken",
                        "ecr:BatchCheckLayerAvailability",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:BatchGetImage",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "ssm:UpdateInstanceInformation",
                        "ssm:UpdateInstanceAssociationStatus",
                        "ssm:ListInstanceAssociations",
                        "ssm:DescribeInstanceProperties",
                        "ec2messages:*",
                        "ssmmessages:*",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "ecs-instance-role-20241231140302609500000005"
}

# module.ecs_task_role.aws_iam_role_policy.ecs_managed_tags_policy:
resource "aws_iam_role_policy" "ecs_managed_tags_policy" {
    id          = "demo-ecs-task-role-82a5a8b220241231140302608100000004:ecs-managed-tags-policy"
    name        = "ecs-managed-tags-policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ec2:CreateTags",
                        "ec2:DeleteTags",
                        "ecs:TagResource",
                        "ecs:UntagResource",
                        "ecs:ListTagsForResource",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-task-role-82a5a8b220241231140302608100000004"
}

# module.ecs_task_role.aws_iam_role_policy.ecs_service_discoveryv1:
resource "aws_iam_role_policy" "ecs_service_discoveryv1" {
    id          = "demo-ecs-exec-role-82a5a8b220241231140303827900000006:ecs-service-discovery-policy"
    name        = "ecs-service-discovery-policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ecs:DescribeServices",
                        "ecs:ListTasks",
                        "ecs:DescribeTasks",
                        "ecs:DescribeContainerInstances",
                        "ec2:DescribeInstances",
                        "ecs:DiscoverInstances",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-exec-role-82a5a8b220241231140303827900000006"
}

# module.ecs_task_role.aws_iam_role_policy.ecs_service_discoveryv2:
resource "aws_iam_role_policy" "ecs_service_discoveryv2" {
    id          = "demo-ecs-exec-role-82a5a8b220241231140303827900000006:ecs-service-discovery-policy"
    name        = "ecs-service-discovery-policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ecs:DescribeServices",
                        "ecs:ListTasks",
                        "ecs:DescribeTasks",
                        "ecs:DescribeContainerInstances",
                        "ec2:DescribeInstances",
                        "ecs:DiscoverInstances",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-exec-role-82a5a8b220241231140303827900000006"
}

# module.ecs_task_role.aws_iam_role_policy.ecs_stop_task_policy:
resource "aws_iam_role_policy" "ecs_stop_task_policy" {
    id          = "demo-ecs-task-role-82a5a8b220241231140302608100000004:ecs-stop-task-policy"
    name        = "ecs-stop-task-policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = "ecs:StopTask"
                    Effect   = "Allow"
                    Resource = "arn:aws:ecs:*:*:task/*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-task-role-82a5a8b220241231140302608100000004"
}

# module.ecs_task_role.aws_iam_role_policy.ecs_task_execution_docker_policy_v1:
resource "aws_iam_role_policy" "ecs_task_execution_docker_policy_v1" {
    id          = "demo-ecs-task-role-82a5a8b220241231140302608100000004:ecs_task_execution_docker_policy"
    name        = "ecs_task_execution_docker_policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ecr:GetAuthorizationToken",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "ecs:ExecuteCommand",
                        "ecs:RunTask",
                        "ecs:StopTask",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-task-role-82a5a8b220241231140302608100000004"
}

# module.ecs_task_role.aws_iam_role_policy.ecs_task_execution_docker_policy_v2:
resource "aws_iam_role_policy" "ecs_task_execution_docker_policy_v2" {
    id          = "demo-ecs-task-role-82a5a8b220241231140302608100000004:ecs_task_execution_docker_policy"
    name        = "ecs_task_execution_docker_policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ecr:GetAuthorizationToken",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-task-role-82a5a8b220241231140302608100000004"
}

# module.ecs_task_role.aws_iam_role_policy.ecs_task_execution_network_policy:
resource "aws_iam_role_policy" "ecs_task_execution_network_policy" {
    id          = "demo-ecs-task-role-82a5a8b220241231140302608100000004:ecs_task_execution_network_policy"
    name        = "ecs_task_execution_network_policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:CreateNetworkInterface",
                        "ec2:DeleteNetworkInterface",
                        "ec2:DescribeInstances",
                        "ec2:AttachNetworkInterface",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-task-role-82a5a8b220241231140302608100000004"
}

# module.ecs_task_role.aws_iam_role_policy.ecs_task_metadata_policy:
resource "aws_iam_role_policy" "ecs_task_metadata_policy" {
    id          = "demo-ecs-task-role-82a5a8b220241231140302608100000004:ecs-task-metadata-policy"
    name        = "ecs-task-metadata-policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ecs:DescribeTasks",
                        "ecs:ListTasks",
                        "ecs:DescribeContainerInstances",
                        "ecs:DescribeClusters",
                        "ecs:ListContainerInstances",
                        "ecs:ListClusters",
                        "ecs:ListServices",
                        "ecs:DescribeServices",
                        "ecs:ListTaskDefinitions",
                        "ecs:DescribeTaskDefinition",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-task-role-82a5a8b220241231140302608100000004"
}

# module.ecs_task_role.aws_iam_role_policy.ecs_task_role_vpc_policy:
resource "aws_iam_role_policy" "ecs_task_role_vpc_policy" {
    id          = "demo-ecs-task-role-82a5a8b220241231140302608100000004:ecs_task_vpc_policy"
    name        = "ecs_task_vpc_policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ec2:CreateNetworkInterface",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:DeleteNetworkInterface",
                        "ec2:DescribeInstances",
                        "ec2:AttachNetworkInterface",
                        "ec2:DetachNetworkInterface",
                        "ecs:DescribeClusters",
                        "ec2:DescribeInstanceStatus",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-task-role-82a5a8b220241231140302608100000004"
}

# module.ecs_task_role.aws_iam_role_policy.enhanced_monitoring_policy:
resource "aws_iam_role_policy" "enhanced_monitoring_policy" {
    id          = "demo-ecs-task-role-82a5a8b220241231140302608100000004:enhanced-monitoring-policy"
    name        = "enhanced-monitoring-policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "cloudwatch:PutMetricData",
                        "cloudwatch:GetMetricStatistics",
                        "cloudwatch:ListMetrics",
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:DescribeLogStreams",
                        "logs:PutLogEvents",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-task-role-82a5a8b220241231140302608100000004"
}

# module.ecs_task_role.aws_iam_role_policy.task_cloudwatch_policy:
resource "aws_iam_role_policy" "task_cloudwatch_policy" {
    id          = "demo-ecs-task-role-82a5a8b220241231140302608100000004:task_cloudwatch_policy"
    name        = "task_cloudwatch_policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-task-role-82a5a8b220241231140302608100000004"
}

# module.ecs_task_role.aws_iam_role_policy.task_filesystem_write_policy:
resource "aws_iam_role_policy" "task_filesystem_write_policy" {
    id          = "demo-ecs-task-role-82a5a8b220241231140302608100000004:task-filesystem-write-policy"
    name        = "task-filesystem-write-policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "efs:WriteFile",
                        "efs:WriteData",
                        "efs:CreateFileSystem",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-task-role-82a5a8b220241231140302608100000004"
}

# module.ecs_task_role.aws_iam_role_policy.task_role_policy:
resource "aws_iam_role_policy" "task_role_policy" {
    id          = "demo-ecs-task-role-82a5a8b220241231140302608100000004:ecs-task-role-policy"
    name        = "ecs-task-role-policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ecs:ListTasks",
                        "ecs:DescribeTasks",
                        "ecs:DescribeContainerInstances",
                        "ec2:DescribeInstances",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-task-role-82a5a8b220241231140302608100000004"
}

# module.ecs_task_role.aws_iam_role_policy.task_s3_policy:
resource "aws_iam_role_policy" "task_s3_policy" {
    id          = "demo-ecs-task-role-82a5a8b220241231140302608100000004:demo-ecs-task-role-82a5a8b2-s3-policy"
    name        = "demo-ecs-task-role-82a5a8b2-s3-policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "s3:GetObject",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:s3:::dev-tfstate-0e982c82f3f4acdb/*",
                    ]
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-task-role-82a5a8b220241231140302608100000004"
}

# module.ecs_task_role.aws_iam_role_policy.task_ssm_policy:
resource "aws_iam_role_policy" "task_ssm_policy" {
    id          = "demo-ecs-task-role-82a5a8b220241231140302608100000004:task_ssm_policy"
    name        = "task_ssm_policy"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ssm:GetParameters",
                        "ssm:GetParameter",
                        "ssm:GetParametersByPath",
                    ]
                    Effect   = "Allow"
                    Resource = "arn:aws:ssm:*:*:parameter/*"
                },
                {
                    Action   = [
                        "ssmmessages:CreateControlChannel",
                        "ssmmessages:CreateDataChannel",
                        "ssmmessages:OpenControlChannel",
                        "ssmmessages:OpenDataChannel",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
                {
                    Action   = [
                        "logs:DescribeLogGroups",
                    ]
                    Effect   = "Allow"
                    Resource = "*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "demo-ecs-task-role-82a5a8b220241231140302608100000004"
}

# module.ecs_task_role.aws_iam_role_policy_attachment.custom_ssm_policy_attachment:
resource "aws_iam_role_policy_attachment" "custom_ssm_policy_attachment" {
    id         = "ecs-instance-role-20241231140302609500000005-20241231140307039200000012"
    policy_arn = "arn:aws:iam::010575877879:policy/CustomSSMInstancePolicy"
    role       = "ecs-instance-role-20241231140302609500000005"
}

# module.ecs_task_role.aws_iam_role_policy_attachment.ecs_exec_role_policy:
resource "aws_iam_role_policy_attachment" "ecs_exec_role_policy" {
    id         = "demo-ecs-exec-role-82a5a8b220241231140303827900000006-20241231140307916600000016"
    policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
    role       = "demo-ecs-exec-role-82a5a8b220241231140303827900000006"
}

# module.ecs_task_role.aws_iam_role_policy_attachment.ecs_exec_role_ssm_policy:
resource "aws_iam_role_policy_attachment" "ecs_exec_role_ssm_policy" {
    id         = "demo-ecs-exec-role-82a5a8b220241231140303827900000006-20241231140307459200000015"
    policy_arn = "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"
    role       = "demo-ecs-exec-role-82a5a8b220241231140303827900000006"
}

# module.ecs_task_role.aws_iam_role_policy_attachment.ecs_instance_role_policy:
resource "aws_iam_role_policy_attachment" "ecs_instance_role_policy" {
    id         = "ecs-instance-role-20241231140302609500000005-2024123114030502220000000e"
    policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
    role       = "ecs-instance-role-20241231140302609500000005"
}

# module.ecs_task_role.aws_iam_role_policy_attachment.ssm_instance_policy:
resource "aws_iam_role_policy_attachment" "ssm_instance_policy" {
    id         = "ecs-instance-role-20241231140302609500000005-2024123114030492510000000d"
    policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
    role       = "ecs-instance-role-20241231140302609500000005"
}


# module.internet_gateway.aws_eip.main[0]:
resource "aws_eip" "main" {
    allocation_id            = "eipalloc-0ddff8479347f4a32"
    arn                      = "arn:aws:ec2:us-east-1:010575877879:elastic-ip/eipalloc-0ddff8479347f4a32"
    association_id           = [90mnull[0m[0m
    carrier_ip               = [90mnull[0m[0m
    customer_owned_ip        = [90mnull[0m[0m
    customer_owned_ipv4_pool = [90mnull[0m[0m
    domain                   = "vpc"
    id                       = "eipalloc-0ddff8479347f4a32"
    instance                 = [90mnull[0m[0m
    network_border_group     = "us-east-1"
    network_interface        = [90mnull[0m[0m
    private_ip               = [90mnull[0m[0m
    ptr_record               = [90mnull[0m[0m
    public_dns               = "ec2-54-235-79-19.compute-1.amazonaws.com"
    public_ip                = "54.235.79.19"
    public_ipv4_pool         = "amazon"
    tags                     = {
        "Name" = "demo-eip-us-east-1a"
    }
    tags_all                 = {
        "Name" = "demo-eip-us-east-1a"
    }
    vpc                      = true
}

# module.internet_gateway.aws_eip.main[1]:
resource "aws_eip" "main" {
    allocation_id            = "eipalloc-0a9718e7f88d53947"
    arn                      = "arn:aws:ec2:us-east-1:010575877879:elastic-ip/eipalloc-0a9718e7f88d53947"
    association_id           = [90mnull[0m[0m
    carrier_ip               = [90mnull[0m[0m
    customer_owned_ip        = [90mnull[0m[0m
    customer_owned_ipv4_pool = [90mnull[0m[0m
    domain                   = "vpc"
    id                       = "eipalloc-0a9718e7f88d53947"
    instance                 = [90mnull[0m[0m
    network_border_group     = "us-east-1"
    network_interface        = [90mnull[0m[0m
    private_ip               = [90mnull[0m[0m
    ptr_record               = [90mnull[0m[0m
    public_dns               = "ec2-44-221-39-34.compute-1.amazonaws.com"
    public_ip                = "44.221.39.34"
    public_ipv4_pool         = "amazon"
    tags                     = {
        "Name" = "demo-eip-us-east-1b"
    }
    tags_all                 = {
        "Name" = "demo-eip-us-east-1b"
    }
    vpc                      = true
}

# module.internet_gateway.aws_internet_gateway.main:
resource "aws_internet_gateway" "main" {
    arn      = "arn:aws:ec2:us-east-1:010575877879:internet-gateway/igw-081550b226f2fd201"
    id       = "igw-081550b226f2fd201"
    owner_id = "010575877879"
    tags     = {
        "Name" = "demo-igw-82a5a8b2"
    }
    tags_all = {
        "Name" = "demo-igw-82a5a8b2"
    }
    vpc_id   = "vpc-057f028812bd7c22f"
}


# module.log_group.aws_cloudwatch_log_group.this:
resource "aws_cloudwatch_log_group" "this" {
    arn               = "arn:aws:logs:us-east-1:010575877879:log-group:log_group-82a5a8b2"
    id                = "log_group-82a5a8b2"
    kms_key_id        = [90mnull[0m[0m
    log_group_class   = "STANDARD"
    name              = "log_group-82a5a8b2"
    name_prefix       = [90mnull[0m[0m
    retention_in_days = 1
    skip_destroy      = false
    tags              = {
        "Application" = "ecs-cluster"
        "Environment" = "production"
    }
    tags_all          = {
        "Application" = "ecs-cluster"
        "Environment" = "production"
    }
}

# module.log_group.aws_cloudwatch_log_stream.this:
resource "aws_cloudwatch_log_stream" "this" {
    arn            = "arn:aws:logs:us-east-1:010575877879:log-group:log_group-82a5a8b2:log-stream:log_group-82a5a8b2-stream"
    id             = "log_group-82a5a8b2-stream"
    log_group_name = "log_group-82a5a8b2"
    name           = "log_group-82a5a8b2-stream"
}


# module.nat_gateway.aws_eip.nat:
resource "aws_eip" "nat" {
    allocation_id            = "eipalloc-0151f611be3d82346"
    arn                      = "arn:aws:ec2:us-east-1:010575877879:elastic-ip/eipalloc-0151f611be3d82346"
    association_id           = [90mnull[0m[0m
    carrier_ip               = [90mnull[0m[0m
    customer_owned_ip        = [90mnull[0m[0m
    customer_owned_ipv4_pool = [90mnull[0m[0m
    domain                   = "vpc"
    id                       = "eipalloc-0151f611be3d82346"
    instance                 = [90mnull[0m[0m
    network_border_group     = "us-east-1"
    network_interface        = [90mnull[0m[0m
    private_ip               = [90mnull[0m[0m
    ptr_record               = [90mnull[0m[0m
    public_dns               = "ec2-34-205-120-9.compute-1.amazonaws.com"
    public_ip                = "34.205.120.9"
    public_ipv4_pool         = "amazon"
    tags                     = {
        "Name" = "demo-eip-nat"
    }
    tags_all                 = {
        "Name" = "demo-eip-nat"
    }
    vpc                      = true
}

# module.nat_gateway.aws_nat_gateway.main:
resource "aws_nat_gateway" "main" {
    allocation_id                      = "eipalloc-0151f611be3d82346"
    association_id                     = "eipassoc-030ca5aec65f11488"
    connectivity_type                  = "public"
    id                                 = "nat-0de81dfce051277c5"
    network_interface_id               = "eni-08ab8adb9f7d43b70"
    private_ip                         = "10.0.0.58"
    public_ip                          = "34.205.120.9"
    secondary_private_ip_address_count = 0
    secondary_private_ip_addresses     = []
    subnet_id                          = "subnet-04bd9aa18e82fd83e"
    tags                               = {
        "Name" = "demo-nat-gw"
    }
    tags_all                           = {
        "Name" = "demo-nat-gw"
    }

    timeouts {
        create = "30m"
        delete = "30m"
    }
}


# module.route_table.aws_route.private_nat_gateway[0]:
resource "aws_route" "private_nat_gateway" {
    carrier_gateway_id          = [90mnull[0m[0m
    core_network_arn            = [90mnull[0m[0m
    destination_cidr_block      = "0.0.0.0/0"
    destination_ipv6_cidr_block = [90mnull[0m[0m
    destination_prefix_list_id  = [90mnull[0m[0m
    egress_only_gateway_id      = [90mnull[0m[0m
    gateway_id                  = [90mnull[0m[0m
    id                          = "r-rtb-0bc4c9aa75ee15d371080289494"
    instance_id                 = [90mnull[0m[0m
    instance_owner_id           = [90mnull[0m[0m
    local_gateway_id            = [90mnull[0m[0m
    nat_gateway_id              = "nat-0de81dfce051277c5"
    network_interface_id        = [90mnull[0m[0m
    origin                      = "CreateRoute"
    route_table_id              = "rtb-0bc4c9aa75ee15d37"
    state                       = "active"
    transit_gateway_id          = [90mnull[0m[0m
    vpc_endpoint_id             = [90mnull[0m[0m
    vpc_peering_connection_id   = [90mnull[0m[0m
}

# module.route_table.aws_route.private_nat_gateway[1]:
resource "aws_route" "private_nat_gateway" {
    carrier_gateway_id          = [90mnull[0m[0m
    core_network_arn            = [90mnull[0m[0m
    destination_cidr_block      = "0.0.0.0/0"
    destination_ipv6_cidr_block = [90mnull[0m[0m
    destination_prefix_list_id  = [90mnull[0m[0m
    egress_only_gateway_id      = [90mnull[0m[0m
    gateway_id                  = [90mnull[0m[0m
    id                          = "r-rtb-0237d21dc2812f8a41080289494"
    instance_id                 = [90mnull[0m[0m
    instance_owner_id           = [90mnull[0m[0m
    local_gateway_id            = [90mnull[0m[0m
    nat_gateway_id              = "nat-0de81dfce051277c5"
    network_interface_id        = [90mnull[0m[0m
    origin                      = "CreateRoute"
    route_table_id              = "rtb-0237d21dc2812f8a4"
    state                       = "active"
    transit_gateway_id          = [90mnull[0m[0m
    vpc_endpoint_id             = [90mnull[0m[0m
    vpc_peering_connection_id   = [90mnull[0m[0m
}

# module.route_table.aws_route.public_internet_gateway:
resource "aws_route" "public_internet_gateway" {
    carrier_gateway_id          = [90mnull[0m[0m
    core_network_arn            = [90mnull[0m[0m
    destination_cidr_block      = "0.0.0.0/0"
    destination_ipv6_cidr_block = [90mnull[0m[0m
    destination_prefix_list_id  = [90mnull[0m[0m
    egress_only_gateway_id      = [90mnull[0m[0m
    gateway_id                  = "igw-081550b226f2fd201"
    id                          = "r-rtb-0bc43807f49e500581080289494"
    instance_id                 = [90mnull[0m[0m
    instance_owner_id           = [90mnull[0m[0m
    local_gateway_id            = [90mnull[0m[0m
    nat_gateway_id              = [90mnull[0m[0m
    network_interface_id        = [90mnull[0m[0m
    origin                      = "CreateRoute"
    route_table_id              = "rtb-0bc43807f49e50058"
    state                       = "active"
    transit_gateway_id          = [90mnull[0m[0m
    vpc_endpoint_id             = [90mnull[0m[0m
    vpc_peering_connection_id   = [90mnull[0m[0m
}

# module.route_table.aws_route_table.private[0]:
resource "aws_route_table" "private" {
    arn              = "arn:aws:ec2:us-east-1:010575877879:route-table/rtb-0bc4c9aa75ee15d37"
    id               = "rtb-0bc4c9aa75ee15d37"
    owner_id         = "010575877879"
    propagating_vgws = []
    route            = []
    tags             = {
        "Name" = "demo-private-rt-1"
    }
    tags_all         = {
        "Name" = "demo-private-rt-1"
    }
    vpc_id           = "vpc-057f028812bd7c22f"
}

# module.route_table.aws_route_table.private[1]:
resource "aws_route_table" "private" {
    arn              = "arn:aws:ec2:us-east-1:010575877879:route-table/rtb-0237d21dc2812f8a4"
    id               = "rtb-0237d21dc2812f8a4"
    owner_id         = "010575877879"
    propagating_vgws = []
    route            = []
    tags             = {
        "Name" = "demo-private-rt-2"
    }
    tags_all         = {
        "Name" = "demo-private-rt-2"
    }
    vpc_id           = "vpc-057f028812bd7c22f"
}

# module.route_table.aws_route_table.public:
resource "aws_route_table" "public" {
    arn              = "arn:aws:ec2:us-east-1:010575877879:route-table/rtb-0bc43807f49e50058"
    id               = "rtb-0bc43807f49e50058"
    owner_id         = "010575877879"
    propagating_vgws = []
    route            = []
    tags             = {
        "Name" = "demo-public-rt"
    }
    tags_all         = {
        "Name" = "demo-public-rt"
    }
    vpc_id           = "vpc-057f028812bd7c22f"
}

# module.route_table.aws_route_table_association.private[0]:
resource "aws_route_table_association" "private" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-00e58d8ae9629e7bc"
    route_table_id = "rtb-0bc4c9aa75ee15d37"
    subnet_id      = "subnet-0b2b0edf12a8178c6"
}

# module.route_table.aws_route_table_association.private[1]:
resource "aws_route_table_association" "private" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-049aed14c5ab26ff6"
    route_table_id = "rtb-0237d21dc2812f8a4"
    subnet_id      = "subnet-0da891b8774e4876e"
}

# module.route_table.aws_route_table_association.public[0]:
resource "aws_route_table_association" "public" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-01479c1696181840c"
    route_table_id = "rtb-0bc43807f49e50058"
    subnet_id      = "subnet-04bd9aa18e82fd83e"
}

# module.route_table.aws_route_table_association.public[1]:
resource "aws_route_table_association" "public" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-0258e3374bbb64a1a"
    route_table_id = "rtb-0bc43807f49e50058"
    subnet_id      = "subnet-0e14e0a9592a6fad8"
}


# module.service_discovery.aws_service_discovery_private_dns_namespace.this:
resource "aws_service_discovery_private_dns_namespace" "this" {
    arn         = "arn:aws:servicediscovery:us-east-1:010575877879:namespace/ns-ejamhy7gif2zfjpa"
    description = "Private DNS namespace for dev services"
    hosted_zone = "Z00405131CNEY898F14EU"
    id          = "ns-ejamhy7gif2zfjpa"
    name        = "dev-services"
    tags_all    = {}
    vpc         = "vpc-057f028812bd7c22f"
}

# module.service_discovery.aws_service_discovery_service.nodejs:
resource "aws_service_discovery_service" "nodejs" {
    arn           = "arn:aws:servicediscovery:us-east-1:010575877879:service/srv-oxyfeqhhgo3lr2sw"
    description   = [90mnull[0m[0m
    force_destroy = false
    id            = "srv-oxyfeqhhgo3lr2sw"
    name          = "ECS-discovery"
    namespace_id  = "ns-ejamhy7gif2zfjpa"
    tags_all      = {}
    type          = "DNS_HTTP"

    dns_config {
        namespace_id   = "ns-ejamhy7gif2zfjpa"
        routing_policy = "MULTIVALUE"

        dns_records {
            ttl  = 10
            type = "SRV"
        }
    }

    health_check_custom_config {
        failure_threshold = 1
    }
}


# module.vpc.aws_subnet.private[0]:
resource "aws_subnet" "private" {
    arn                                            = "arn:aws:ec2:us-east-1:010575877879:subnet/subnet-0b2b0edf12a8178c6"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1a"
    availability_zone_id                           = "use1-az2"
    cidr_block                                     = "10.0.2.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0b2b0edf12a8178c6"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "010575877879"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "demo-vpc-82a5a8b2-private-us-east-1a"
    }
    tags_all                                       = {
        "Name" = "demo-vpc-82a5a8b2-private-us-east-1a"
    }
    vpc_id                                         = "vpc-057f028812bd7c22f"
}

# module.vpc.aws_subnet.private[1]:
resource "aws_subnet" "private" {
    arn                                            = "arn:aws:ec2:us-east-1:010575877879:subnet/subnet-0da891b8774e4876e"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1b"
    availability_zone_id                           = "use1-az4"
    cidr_block                                     = "10.0.3.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0da891b8774e4876e"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "010575877879"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "demo-vpc-82a5a8b2-private-us-east-1b"
    }
    tags_all                                       = {
        "Name" = "demo-vpc-82a5a8b2-private-us-east-1b"
    }
    vpc_id                                         = "vpc-057f028812bd7c22f"
}

# module.vpc.aws_subnet.public[0]:
resource "aws_subnet" "public" {
    arn                                            = "arn:aws:ec2:us-east-1:010575877879:subnet/subnet-04bd9aa18e82fd83e"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1a"
    availability_zone_id                           = "use1-az2"
    cidr_block                                     = "10.0.0.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-04bd9aa18e82fd83e"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = true
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "010575877879"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "demo-vpc-82a5a8b2-public-us-east-1a"
    }
    tags_all                                       = {
        "Name" = "demo-vpc-82a5a8b2-public-us-east-1a"
    }
    vpc_id                                         = "vpc-057f028812bd7c22f"
}

# module.vpc.aws_subnet.public[1]:
resource "aws_subnet" "public" {
    arn                                            = "arn:aws:ec2:us-east-1:010575877879:subnet/subnet-0e14e0a9592a6fad8"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1b"
    availability_zone_id                           = "use1-az4"
    cidr_block                                     = "10.0.1.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0e14e0a9592a6fad8"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = true
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "010575877879"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "demo-vpc-82a5a8b2-public-us-east-1b"
    }
    tags_all                                       = {
        "Name" = "demo-vpc-82a5a8b2-public-us-east-1b"
    }
    vpc_id                                         = "vpc-057f028812bd7c22f"
}

# module.vpc.aws_vpc.main:
resource "aws_vpc" "main" {
    arn                                  = "arn:aws:ec2:us-east-1:010575877879:vpc/vpc-057f028812bd7c22f"
    assign_generated_ipv6_cidr_block     = false
    cidr_block                           = "10.0.0.0/16"
    default_network_acl_id               = "acl-0227cb953aae9ffe7"
    default_route_table_id               = "rtb-0a282fd4841dc236f"
    default_security_group_id            = "sg-00fd0758954a53c35"
    dhcp_options_id                      = "dopt-06d2655013d8d60c3"
    enable_dns_hostnames                 = true
    enable_dns_support                   = true
    enable_network_address_usage_metrics = false
    id                                   = "vpc-057f028812bd7c22f"
    instance_tenancy                     = "default"
    ipv6_association_id                  = [90mnull[0m[0m
    ipv6_cidr_block                      = [90mnull[0m[0m
    ipv6_cidr_block_network_border_group = [90mnull[0m[0m
    ipv6_ipam_pool_id                    = [90mnull[0m[0m
    ipv6_netmask_length                  = 0
    main_route_table_id                  = "rtb-0a282fd4841dc236f"
    owner_id                             = "010575877879"
    tags                                 = {
        "Name" = "demo-vpc-82a5a8b2"
    }
    tags_all                             = {
        "Name" = "demo-vpc-82a5a8b2"
    }
}


Outputs:

alb_dns_name = "demo-alb-82a5a8b2-60644634.us-east-1.elb.amazonaws.com"
application_url = "http://demo-alb-82a5a8b2-60644634.us-east-1.elb.amazonaws.com"
container_name = "my-container-nginx"
container_names = {
    nginx  = "my-container-nginx"
    nodejs = "my-container-nodejs"
}
debug_ecs_service = {
    service_id   = "arn:aws:ecs:us-east-1:010575877879:service/demo-cluster-82a5a8b2/ECS-s-node"
    service_name = "ECS-s-node"
}
full_access_policy_arn = "arn:aws:iam::010575877879:policy/demo-ecs-node-role-82a5a8b2-full20241231140303900100000007"
instance_ips = []
key_file_path = "/Users/sagi/Desktop/terraform/git/ecs_auto_deployment-/ecs-instance-key-82a5a8b2.pem"
key_name = "ecs-instance-key-82a5a8b2"
module_path = "."
rendered_user_data = (sensitive value)
selected_ecs_optimized_ami_id = "ami-0448a709165fd89ff"
ssh_commands = []
task_definition_container_name_for_nginx = "my-container-nginx"
